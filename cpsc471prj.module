<?php
module_load_include('php', 'cpsc471prj', 'includes/User');

/**
 * Implements hook_permission()
 * 
 * Sets the different permissions that drupal will use for building menus
 * 
 * this prevents renters from seeing manager links,
 * and  managers from seeing renter links
 * @return string[][]
 * 		The permission descriptions
 */
function cpsc471prj_permission() {
	return array (
		'renter' => array (
			'title' => 'Renter',
			'description' => 'Permission to check if user is renter'
		),
		'manager' => array (
			'title' => 'Manager',
			'description' => 'Permission to check if user is manager'
		),
	);
}

/**
 * Implements hook_menu()
 * 
 * Describes the various paths for accessing pages of the website
 * 
 * @return array
 */
function cpsc471prj_menu(){
	$items = array();
	
	$items['scc'] = array (
		'title' => 'Home',
		'description' => 'Main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'home_form',	
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
		
		),
	);
	
	$items['scc/renter'] = array (
		'title' => 'Renter',
		'description' => 'Rental main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_home_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
	);
	
	$items['scc/manager'] = array (
		'title' => 'Manager',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_home_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/seasons'] = array (
		'title' => 'View Seasons',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_view_seasons_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/seasons/new'] = array (
			'title' => 'Create Season',
			'description' => 'Manager main page',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'manager_create_seasons_form',
			),
			'menu_name' => 'cpsc',
			'access callback' => 'cpsc471_access',
			'access arguments' => array (
					'manager'
			),
			'type' => MENU_LOCAL_ACTION
	);
	
	
	$items['test/%'] = array (
		'title' => 'Test',
		'description' => 'This is a test',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'myform', 1,
		),
		'access callback' => true,
		
	);
	return $items;
}

/**
 * Access callback for menu building
 * 
 * Accepts n argument, where arguments are permission names
 * 
 * @return boolean
 * 		true if the user has all the provided permissions,
 * 		false otherwise
 */
function cpsc471_access() {
	//get the arguments provided
	$arguments = func_get_args();
	$user = new User();
	//check each argument
	foreach($arguments as $permission) {
		if(!$user->hasPermission($permission)) {
			return false;
		}
	}
	
	return true;
}

/**
 * Main router for the website
 * 
 * If user is logs in checks them for manager role and redirects there,
 * otherwise directs to user page
 * 
 * If they are not logged in, it will provided a form for creating 
 * an account
 * 
 */
function home_form($form, &$form_state) {
	
	$user = new User();
	
	if(user_is_logged_in()) {
		if($user->hasRole('Renter')) {
			drupal_goto('renter');
		} else if($user->hasRole('Manager')) {
			drupal_goto('manager');
		}
	}
	
	drupal_set_title('Create Account');
	
	$form['username'] = array (
		'#title' => 'Username',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['name'] = array (
		'#title' => 'Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['email'] = array (
		'#title' => 'eMail',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['password'] = array (
		'#title' => 'Password',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['credit_card'] = array (
		'#title' => 'Credit Card Number',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Account',
		'#submit' => array(
				'home_form_submit'
		),
	);
	
	return $form;
}

function home_form_submit($form, $form_state) {
	drupal_set_message('TO DO this function');
}

function manager_home_form($form, &$form_state) {
	$form['test'] = array (
			'#markup' => 'manager',
	);

	return $form;
}

function renter_home_form($form, &$form_state) {
	$form['test'] = array (
		'#markup' => 'renter',	
	);

	return $form;
}







////////////////////////////
//Demo code below this line
////////////////////////////

/**
 * Prints all arguments as drupal messages
 */
function scc_debug() {
	
	$args = func_get_args();
	
	foreach($args as $arg) {
		drupal_set_message('<pre>' . print_r($arg, true) . '</pre>', 'warning');
	}
	
}


function myform($form, &$form_state, $number) {
	
	db_query("SELECT * FROM Users");
	

	if(isset($form_state['storage']['save_value'])) {
		$number = $form_state['storage']['save_value'];
		$number *= 2;
	}
	
	
	$form['ex'] = array (
		'#prefix' => '<div id="my_div">',
		'#markup' => $number,	
		'#suffix' => '</div>',
	);
	
	$form_state['storage']['save_value'] = intval($number);
	
	$form['button'] = array (
		'#type' => 'fieldset',
		'#title' => 'fred',
		
		
			
		
			
		'button2' => array (
			'#type' => 'button',
			'#value' => 'fish',
				'#ajax' => array (
						'callback' => 'my_ajax',
						'wrapper' => 'my_div',
				),
		),
	);
	
	$form['textfield6'] = array (
		'#type' => 'textfield',	
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Submit',
			
			
		'#validate' => array('validate'),
		'#submit' => array('submit'),
	);
	
	return $form;
}

function validate($form, &$form_state) {
	$form_state['values']['textfield6'] = intval($form_state['values']['textfield6'] );
	
	if($form_state['values']['textfield6'] == 0) {
		form_set_error('textfield6', "stop");
	}
}

function submit($form, &$form_state) {
	drupal_set_message($form_state['values']['textfield6']);
	drupal_goto('');
}

function my_ajax($form, $form_state) {
	return $form['ex'];
}
?>