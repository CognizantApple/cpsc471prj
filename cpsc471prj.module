<?php
module_load_include('php', 'cpsc471prj', 'includes/instances/User');
module_load_include('php', 'cpsc471prj', 'includes/instances/Renter');
module_load_include('php', 'cpsc471prj', 'includes/instances/RentalAccount');
module_load_include('php', 'cpsc471prj', 'includes/instances/Cottage');
module_load_include('php', 'cpsc471prj', 'includes/instances/Season');
module_load_include('php', 'cpsc471prj', 'includes/instances/CottagePriceGuide');
module_load_include('php', 'cpsc471prj', 'includes/instances/PricedFor');
module_load_include('php', 'cpsc471prj', 'includes/Validator');


/**
 * Implements hook_permission()
 * 
 * Sets the different permissions that drupal will use for building menus
 * 
 * this prevents renters from seeing manager links,
 * and  managers from seeing renter links
 * @return string[][]
 * 		The permission descriptions
 */
function cpsc471prj_permission() {
	return array (
		'renter' => array (
			'title' => 'Renter',
			'description' => 'Permission to check if user is renter'
		),
		'manager' => array (
			'title' => 'Manager',
			'description' => 'Permission to check if user is manager'
		),
	);
}

/**
 * Implements hook_menu()
 * 
 * Describes the various paths for accessing pages of the website
 * 
 * @return array
 */
function cpsc471prj_menu(){
	$items = array();
	
	$items['scc'] = array (
		'title' => 'Home',
		'description' => 'Main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'home_form',	
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
		
		),
	);
	
	$items['scc/renter'] = array (
		'title' => 'Renter',
		'description' => 'Rental main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_home_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
	);
	
	$items['scc/renter/viewrenters'] = array (
		'title' => 'Add Renters',
		'description' => 'Add Renters',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_view_renters_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
	);
	
	$items['scc/renter/viewrenters/add'] = array (
		'title' => 'Add Renters',
		'description' => 'Add Renters',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_add_renters_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	$items['scc/manager'] = array (
		'title' => 'Manager',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_home_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/seasons'] = array (
		'title' => 'View Seasons',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_view_seasons_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/seasons/new'] = array (
		'title' => 'Create Season',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_create_seasons_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	$items['scc/manager/cottages'] = array (
		'title' => 'View Cottages',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_view_cottages_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/cottages/new'] = array (
		'title' => 'New Cottage',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_new_cottage_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	$items['scc/manager/cottagepriceguides'] = array (
		'title' => 'View Cottage Price Guides',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'manager_view_price_guides_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'manager'
		),
	);
	
	$items['scc/manager/cottagepriceguides/new'] = array (
		'title' => 'New Cottage Price Guide',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'manager_new_price_guide_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'manager'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	
	$items['test/%'] = array (
		'title' => 'Test',
		'description' => 'This is a test',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'myform', 1,
		),
		'access callback' => true,
		
	);
	$items['scc/manager/joinCottageSeasonGuide'] = array (
		'title' => 'Select Seasonal Price Guide for Cottage',
		'description' => 'Cottage price guide',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_select_cottage_price_season',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	return $items;
}

/**
 * Access callback for menu building
 * 
 * Accepts n argument, where arguments are permission names
 * 
 * @return boolean
 * 		true if the user has all the provided permissions,
 * 		false otherwise
 */
function cpsc471_access() {
	//get the arguments provided
	$arguments = func_get_args();
	$user = new User();
	//check each argument
	foreach($arguments as $permission) {
		if(!$user->hasPermission($permission)) {
			return false;
		}
	}
	
	return true;
}

/**
 * Main router for the website
 * 
 * If user is logs in checks them for manager role and redirects there,
 * otherwise directs to user page
 * 
 * If they are not logged in, it will provided a form for creating 
 * an account
 * 
 */
function home_form($form, &$form_state) {
	
	$user = new User();
	$user->setRole('Manager', true);
	//$user->setRole('Manager', false);
	if($user->loggedIn()) {
		if($user->hasRole('Renter')) {
			drupal_goto('scc/renter');
		}
		
		if($user->hasRole('Manager')) {
			drupal_goto('scc/manager');
		}
	}
	
	drupal_set_title('Create Account');
	
	$form['name'] = array (
		'#title' => 'Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['email'] = array (
		'#title' => 'eMail',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['password'] = array (
		'#title' => 'Password',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['credit_card'] = array (
		'#title' => 'Credit Card Number',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['phone_number'] = array (
			'#title' => 'Phone number',
			'#type' => 'textfield',
			'#required' => true,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Account',
		'#submit' => array(
				'home_form_submit'
		),
		'#validate' => array(
			'home_form_validate',
		)
	);
	
	return $form;
}

function home_form_validate($form, $form_state){
	if(!Validator::isCreditCardValid($form_state['values']['credit_card'])){
		form_set_error('credit_card', "Invalid Credit Card Format.");
	}
	if(!Validator::isPhoneNumberValid($form_state['values']['phone_number'])){
		form_set_error('phone_number', "Invalid Phone number Format.");
	}
	if(!Validator::isEmailValid($form_state['values']['email'])){
		form_set_error('email', "Invalid email format");
	}
}


/**
 * Creates a new account in both the drupal user table and the rental_account table
 */
function home_form_submit($form, $form_state) {	
	$email = $form_state['values']['email'];
	$password = $form_state['values']['password'];
	$name = $form_state['values']['name'];
	$credit_card = $form_state['values']['credit_card'];//Not saved yet
	$phone = $form_state['values']['phone_number'];
	
	
	//create the new drupal user
	$user = new User();
	$user->setProperty('name', $email);
	$user->setProperty('mail', $email);
	$user->setProperty('pass', $password);
	$user->create();
	//log the new user in
	$user->login();
	$user->setRole('Renter');
	
	//create the initial renter
	$renter = new Renter('new');
	$renter->setProperty('account_uid', $user->getProperty('uid'));
	$renter->setProperty('name', $name);
	$renter->setProperty('is_adult', 1);
	$renter->create();
		
	//create the new account now that we can link the renter and the drupal account
	$account = new RentalAccount();
	$account->setProperty('uid', $user->getProperty('uid'));
	$account->setProperty('credit_card', $credit_card);
	$account->setProperty('phone', $phone);
	$account->setProperty('primary_renter_id', $renter->getProperty('id'));
	$account->create();
	
	//set a friendly message
	drupal_set_message('Account Created, you have been logged into your account.');
}



function manager_home_form($form, &$form_state) {
	$form['test'] = array (
			'#markup' => 'manager',
	);

	return $form;
}


function manager_view_price_guides_form($form, &$form_state) {
	//get all price guides
	$guides = CottagePriceGuide::instanceLoadMultiple();
	
	// create the table hearder
	$header = array (
		'name' => array (
			'data' => 'Name'
		),
		'two_day' => array (
			'data' => 'Two Day Price',
		),
		'three_day'=> array (
			'data' => 'Three Day Price',
		),
		'week '=> array (
			'data' => 'Week Price',
		),
		'rebook_discount' => array (
			'data' => 'Rebook Discount',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($guides as $guide) {
		$row = array('data' => array());
		$row['data']['name'] = $guide->getProperty('name');
		$row['data']['two_day'] = '$' . $guide->getProperty('two_day');
		$row['data']['three_day'] = '$' . $guide->getProperty('three_day');
		$row['data']['week'] = '$' . $guide->getProperty('week');
		$row['data']['rebook_discount'] = $guide->getProperty('rebook_discount') . '%';
		$rows[] = $row;
	}
	
	$form['season_table'] = array (
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,
		'#empty' => 'No price guides have been added',
	);
	
	return $form;
}

/**
 * Displays a form for entering a new price guide
 */
function manager_new_price_guide_form($form, &$form_state) {
	$form['name'] = array (
		'#type' => 'textfield',
		'#title' => 'Price Guide Name',
		'#required' => true,
	);
	
	$form['two_day'] = array (
		'#type' => 'textfield',
		'#title' => 'Two Day Rate',
		'#required' => true,
	);
	
	$form['three_day'] = array (
		'#type' => 'textfield',
		'#title' => 'Three Day Rate',
		'#required' => true,
	);
	
	$form['week'] = array (
		'#type' => 'textfield',
		'#title' => 'Week Rate',
		'#required' => true,
	);
	
	$form['rebook_discount'] = array (
		'#type' => 'textfield',
		'#title' => 'Rebook Discount (%)',
		'#required' => true,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Price Guide',
		'#validate' => array('manager_new_price_guide_form_validate'),
		'#submit' => array('manager_new_price_guide_form_submit'),
	);
	
	return $form;
}

/**
 * Checks that the requested price guide name is unique
 */
function manager_new_price_guide_form_validate($form, &$form_state) {
	
	//check that the price guide name is unique
	$guide = new CottagePriceGuide('new', array(
		'name' => $form_state['values']['name'],
	));
	
	if($guide->existsInDB()) {
		form_set_error('name', 'A price guide with that name already exists');
	}
}

/**
 * Creates a new price guide
 */
function manager_new_price_guide_form_submit($form, &$form_state) {
	$guide = new CottagePriceGuide('new', $form_state['values']);
	$guide->create();
	drupal_set_message('Price Guide Created');
}
function manager_select_cottage_price_season($form, &$form_state){
	/*
	 * Select a cottage, price guide, and season, and then make an
	 * entry in the priced_for table containing the id of the cottage,
	 * start date of the season, and id of the price guide.
	 */
	$guides = CottagePriceGuide::instanceLoadMultiple();
	$seasons = Season::instanceLoadMultiple();
	$cottages = Cottage::instanceLoadMultiple();
	
	
	// don't know what this does lol
	//$form_state['storage']['save_value'] = intval($number);
	
	$guideOptions = array();
	foreach($guides as $guide) {
		$guideOptions[$guide->getProperty("id")] = $guide->getProperty('name');
	}
	
	$seasonOptions = array();
	foreach($seasons as $season) {
		$seasonOptions[$season->getProperty("start_time")] = $season->getProperty('name');
	}
	
	$cottageOptions = array();
	foreach($cottages as $cottage) {
		$cottageOptions[$cottage->getProperty("id")] = $cottage->getProperty('number');
	}
	
	$form['guideselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Guide name',
			'#options' => $guideOptions,
	);
	
	$form['seasonselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Season name',
			'#options' => $seasonOptions,
	);
	
	$form['cottageselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Cottage number',
			'#options' => $cottageOptions,
	);
	
	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Link Cottage To Price Guide',
			'#submit' => array(
					'select_cottage_price_season_submit'
			),
	);
	
	return $form;
}

function select_cottage_price_season_submit($form, $form_state){
	//scc_debug($form_state['values']);
	$pricedForVals = array(
			'cottage_id' => $form_state['values']['cottageselectfield'],
			'season_start_time' => $form_state['values']['seasonselectfield'],
			'cost_guide_id' => $form_state['values']['guideselectfield'],
	);
	
	$pf = new PricedFor('new', $pricedForVals);
	//$s->setCopy($seasonVals);
	$pf->create();
	drupal_set_message("Cottage, season, price guide joined.");
}

function manager_view_seasons_form($form, &$form_state) {
	//get all seasons
	$seasons = Season::instanceLoadMultiple();

	$format = 'F j, Y';
	
	// create the table hearder
	$header = array (
		'start_time' => array (
				'data' => 'Start Time'
		),
		'end_time' => array (
				'data' => 'End Time',
		),
		'name'=> array (
				'data' => 'Name',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($seasons as $season) {
		$row = array('data' => array());
		$row['data']['start_time'] = date($format , $season->getProperty('start_time'));
		$row['data']['end_time'] = date($format ,$season->getProperty('end_time'));
		$row['data']['name'] = $season->getProperty('name');
		$rows[] = $row;
	}
	
	$form['season_table'] = array (
			'#theme' => 'table',
			'#header' => $header,
			'#rows' => $rows,
			'#empty' => 'No seasons have been added',
	);
	
	return $form;
}
function create_season_form_submit($form, $form_state){

	$seasonVals = array(
			'name' => $form_state['values']['name'],
			'start_time' => strtotime($form_state['values']['start_time']),
			'end_time' => strtotime($form_state['values']['end_time']),
	);
	//scc_debug($seasonVals);

	$s = new Season('new', $seasonVals);
	//$s->setCopy($seasonVals);
	$s->create();
	drupal_set_message("Season added.");

}

function manager_create_seasons_form($form, &$form_state) {
	drupal_set_title('New Season');
	$date = '2016-01-01';
	$format = 'Y-m-d';
	/*
	 *
		'#title' => 'Password',
		'#type' => 'textfield',
		'#required' => true,
	 */
	// gather list of information needed for a season
	$form['name'] = array(
			'#title' => 'Season name',
			'#type' => 'textfield',
			'#required' => true,
	);
	$form['start_time'] = array(
			'#title' => 'Start of season',
			'#type' => 'date_popup',
			'#default_value' => $date,
			'#date_format' => $format,
			'#required' => true,
	);
	$form['end_time'] = array(
			'#title' => 'End of season',
			'#type' => 'date_popup',
			'#default_value' => $date,
			'#date_format' => $format,
			'#required' => true,
	);

	// call function which adds the form contents to the seasons DB
	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Add Season',
			'#submit' => array(
					'create_season_form_submit'
			),
	);

	return $form;
}

/**
 * Form with a table of cottages to view
 */
function manager_view_cottages_form($form, &$form_state) {
	//get all the cottages
	$cottages = Cottage::instanceLoadMultiple();
	
	//create the table header
	$header = array (
		'number' => array (
			'data' => 'Number',
		),
		'class' => array (
			'data' => 'Class'
		),
		'max_adults' => array (
			'data' => 'Max Adults',
		),
		'base_adults '=> array (
			'data' => 'Base Adults',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($cottages as $cottage) {
		$row = array('data' => array());
		$row['data']['number'] = $cottage->getProperty('number');
		$row['data']['class'] = $cottage->getProperty('class_name');
		$row['data']['max_adults'] = $cottage->getProperty('max_adults');
		$row['data']['base_adults'] = $cottage->getProperty('base_adults');
		$rows[] = $row;
	}
	
	$form['cottage_table'] = array (
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,
		'#empty' => 'No cottages have been added',
	);
	
	return $form;
}

/**
 * Form for creating a new cottage
 */
function manager_new_cottage_form($form, &$form_state) {
	drupal_set_title('New Cottage');
	
	$form['cottage_class'] = array (
		'#title' => 'Class Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['cottage_number'] = array (
		'#title' => 'Cottage Number',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['max_adults'] = array (
		'#title' => 'Maximum Adults',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['base_adults'] = array (
		'#title' => 'Base Number of Adults',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Cottage',
		'#submit' => array (
			'manager_new_cottage_form_submit'
		),
		'#validate' => array (
			'manager_new_cottage_form_validate'
		),
	);
	
	return $form;
}

/**
 * Checks that all the numbers are positive, and formats the class name
 */
function manager_new_cottage_form_validate($form, &$form_state) {
	//fix capitalization on class name
	$class_name = $form_state['values']['cottage_class'];
	$class_name = ucwords(strtolower($class_name));
	$form_state['values']['cottage_class'] = $class_name;
	
	$inputGood = true;
	
	if(!Validator::isPositive($form_state['values']['max_adults'])) {
		form_set_error('max_adults', 'Max adults count must be positive');
		$inputGood = false;
	}
	
	if(!Validator::isPositive($form_state['values']['base_adults'])) {
		form_set_error('base_adults', 'Base Adults count must be positive');
		$inputGood = false;
	}
	
	if(!Validator::isPositive($form_state['values']['cottage_number'])) {
		form_set_error('cottage_number', 'Cottage Number must be positive');
		$inputGood = false;
	}
	
	if($inputGood) {
		//check that the cottage number is unique
		$cottageNumber = intval($form_state['values']['cottage_number']);
		
		$cottage = new Cottage();
		$cottage->setProperty('number', $cottageNumber);
		if($cottage->existsInDB()) {
			form_set_error('cottage_number', 'Cottage number ' . $cottageNumber . ' already used');
		}
	}
	
}

/**
 * Creates a new cottage from the form_state, and sets a relevant message
 */
function manager_new_cottage_form_submit($form, &$form_state) {
	$values = $form_state['values'];
	
	//create and initializat the cottage
	$cottage = new Cottage();
	$cottage->setProperty('max_adults', $values['max_adults']);
	$cottage->setProperty('base_adults', $values['base_adults']);
	$cottage->setProperty('number', $values['cottage_number']);
	$cottage->setProperty('class_name', $values['cottage_class']);
	
	//this create a starting point for a database interaction,
	//on error it can be reverted to the initial state, this should be used on any multitable interaction
	$t = db_transaction();
	//attempt to create the cottage
	try {
		if ($cottage->create()) {
			drupal_set_message('Cottage Created Successfully.');
		} else {
			drupal_set_message('Cottage already exists, and was not created.', 'error');
		}
	} catch (PDOException $e) {
		drupal_set_message('An error occurred while creating a cottage: ' . $e->getMessage(), 'error');
		$t->rollback();
	}
}

function renter_home_form($form, &$form_state) {
	$form['test'] = array (
		'#markup' => 'renter',	
	);
	
	$testThang = new BoatItem();

	return $form;
}


function renter_add_renters_form($form, &$form_state) {
	drupal_set_title('New Renter');
	
	$date = '2016-01-01';
	$format = 'Y-m-d';
	
	$form['name'] = array (
		'#title' => 'Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['is_adult'] = array (
		'#title' => 'Is Adult',
		'#type' => 'checkbox',
	);
	
	$form['age'] = array (
		'#title' => 'Age',
		'#description' => 'If not an adult, please provide a birthdate',
		'#type' => 'date_popup',
		'#date_year_range' => '-18:+0',
		'#default_value' => $date,
		'#date_format' => $format,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Renter',
		'#submit' => array('renter_add_renters_form_submit'),
	);
		
	return $form;
}

function renter_add_renters_form_submit($form, &$form_state) {
	$birth_time = strtotime($form_state['values']['age']);
	
	$user = new User();
	
	$renter = new Renter('new', array(
		'name' => $form_state['values']['name'],
		'is_adult' => $form_state['values']['is_adult'],
		'birth_time' => $form_state['values']['is_adult'] ? null : $birth_time,
		'account_uid' => $user->getProperty('uid'),
	));
	
	$renter->create();
	
	drupal_set_message('Renter Created');
}

function renter_view_renters_form($form, &$form_state) {
	$user = new User();
	$format = 'F j, Y';
		//get all the renters
	$renters = Renter::instanceLoadMultiple(array('account_uid' => $user->getProperty('uid')));
	
	//create the table header
	$header = array (
		'name' => array (
			'data' => 'Name',
		),
		'is_adult' => array (
			'data' => 'Is Adult'
		),
		'birth_date' => array (
			'data' => 'Birth Date',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($renters as $renter) {
		$row = array('data' => array());
		$row['data']['name'] = $renter->getProperty('name');
		$row['data']['is_adult'] = $renter->getProperty('is_adult') ? 'Yes' : 'No';
		$row['data']['birth_date'] = $renter->getProperty('birth_time') == null ? 'Not specified' : date($format, $renter->getProperty('birth_time'));
		$rows[] = $row;
	}
	
	$form['renter_table'] = array (
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,
	);
	
	return $form;
	
	
}




////////////////////////////
//Demo code below this line
////////////////////////////

/**
 * Prints all arguments as drupal messages
 */
function scc_debug() {
	
	$args = func_get_args();
	
	foreach($args as $arg) {
		drupal_set_message('<pre>' . print_r($arg, true) . '</pre>', 'warning');
	}
	
}


function myform($form, &$form_state, $number) {
	
	db_query("SELECT * FROM Users");
	

	if(isset($form_state['storage']['save_value'])) {
		$number = $form_state['storage']['save_value'];
		$number *= 2;
	}
	
	
	$form['ex'] = array (
		'#prefix' => '<div id="my_div">',
		'#markup' => $number,	
		'#suffix' => '</div>',
	);
	
	$form_state['storage']['save_value'] = intval($number);
	
	$form['button'] = array (
		'#type' => 'fieldset',
		'#title' => 'fred',
		
		
			
		
			
		'button2' => array (
			'#type' => 'button',
			'#value' => 'fish',
				'#ajax' => array (
						'callback' => 'my_ajax',
						'wrapper' => 'my_div',
				),
		),
	);
	
	$form['textfield6'] = array (
		'#type' => 'textfield',	
	);
	
	$form['selectfield'] = array (
		'#type' => 'select',
		'#options' => array (
			'index1' => 'Option One',
			'index2' => 'Option Two',
		),
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Submit',
			
			
		'#validate' => array('validate'),
		'#submit' => array('submit'),
	);
	
	return $form;
}

function validate($form, &$form_state) {
	$form_state['values']['textfield6'] = intval($form_state['values']['textfield6'] );
	
	if($form_state['values']['textfield6'] == 0) {
		form_set_error('textfield6', "stop");
	}
}

function submit($form, &$form_state) {
	drupal_set_message($form_state['values']['textfield6']);
	drupal_goto('');
}

function my_ajax($form, $form_state) {
	return $form['ex'];
}
?>
