<?php
module_load_include('php', 'cpsc471prj', 'includes/instances/User');
module_load_include('php', 'cpsc471prj', 'includes/instances/Renter');
module_load_include('php', 'cpsc471prj', 'includes/instances/RentalAccount');
module_load_include('php', 'cpsc471prj', 'includes/instances/Cottage');
module_load_include('php', 'cpsc471prj', 'includes/instances/BoatItem');
module_load_include('php', 'cpsc471prj', 'includes/instances/BoatItemRate');
module_load_include('php', 'cpsc471prj', 'includes/instances/Season');
module_load_include('php', 'cpsc471prj', 'includes/instances/CottagePriceGuide');
module_load_include('php', 'cpsc471prj', 'includes/instances/PricedFor');
module_load_include('php', 'cpsc471prj', 'includes/instances/BoatItem');
module_load_include('php', 'cpsc471prj', 'includes/instances/Rental');
module_load_include('php', 'cpsc471prj', 'includes/Validator');


/**
 * Implements hook_permission()
 * 
 * Sets the different permissions that drupal will use for building menus
 * 
 * this prevents renters from seeing manager links,
 * and  managers from seeing renter links
 * @return string[][]
 * 		The permission descriptions
 */
function cpsc471prj_permission() {
	return array (
		'renter' => array (
			'title' => 'Renter',
			'description' => 'Permission to check if user is renter'
		),
		'manager' => array (
			'title' => 'Manager',
			'description' => 'Permission to check if user is manager'
		),
	);
}

/**
 * Implements hook_menu()
 * 
 * Describes the various paths for accessing pages of the website
 * 
 * @return array
 */
function cpsc471prj_menu(){
	$items = array();
	
	$items['scc'] = array (
		'title' => 'Home',
		'description' => 'Main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'home_form',	
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
		
		),
	);
	
	$items['scc/renter'] = array (
		'title' => 'Renter',
		'description' => 'Rental main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_home_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
	);
	
	$items['scc/renter/viewrenters'] = array (
		'title' => 'Add Renters',
		'description' => 'Add Renters',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_view_renters_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
	);
	
	$items['scc/renter/viewrenters/add'] = array (
		'title' => 'Add Renters',
		'description' => 'Add Renters',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_add_renters_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	$items['scc/renter/makerental'] = array (
		'title' => 'Place Rental',
		'description' => 'Add Renters',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'renter_create_rental_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'renter'
		),
	);
	
	$items['scc/renter/makeboatrental'] = array (
			'title' => 'Place Boat/Accessory Rental',
			'description' => 'Place Boat Rental',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'renter_create_boat_rental_form',
			),
			'menu_name' => 'cpsc',
			'access callback' => 'cpsc471_access',
			'access arguments' => array (
					'renter'
			),
	);
	
	$items['scc/renter/viewrentals'] = array (
			'title' => 'View your rentals',
			'description' => 'Place Boat Rental',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'renter_view_rentals_form',
			),
			'menu_name' => 'cpsc',
			'access callback' => 'cpsc471_access',
			'access arguments' => array (
					'renter'
			),
	);
	
	$items['scc/manager'] = array (
		'title' => 'Manager',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_home_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/seasons'] = array (
		'title' => 'View Seasons',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_view_seasons_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/seasons/new'] = array (
		'title' => 'Create Season',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_create_seasons_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	$items['scc/manager/cottages'] = array (
		'title' => 'View Cottages',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_view_cottages_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/cottages/new'] = array (
		'title' => 'New Cottage',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_new_cottage_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	$items['scc/manager/boats'] = array (
			'title' => 'View Boats & Accessories',
			'description' => 'Manager main page',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'manager_view_boats_form',
			),
			'menu_name' => 'cpsc',
			'access callback' => 'cpsc471_access',
			'access arguments' => array (
					'manager'
			),
	);
	
	$items['scc/manager/boats/new'] = array (
			'title' => 'New Boat or Accessory',
			'description' => 'Manager main page',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'manager_new_boat_form',
			),
			'menu_name' => 'cpsc',
			'access callback' => 'cpsc471_access',
			'access arguments' => array (
					'manager'
			),
			'type' => MENU_LOCAL_ACTION
	);

	$items['scc/manager/createboatprice'] = array (
			'title' => 'Set Boat Item Rental Rate',
			'description' => 'Boat item rental rate',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'manager_create_boat_price',
			),
			'menu_name' => 'cpsc',
			'access callback' => 'cpsc471_access',
			'access arguments' => array (
					'manager'
			),
	);
	
	$items['scc/manager/cottagepriceguides'] = array (
		'title' => 'View Cottage Price Guides',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'manager_view_price_guides_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'manager'
		),
	);
	
	$items['scc/manager/cottagepriceguides/new'] = array (
		'title' => 'New Cottage Price Guide',
		'description' => 'Manager main page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'manager_new_price_guide_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'manager'
		),
		'type' => MENU_LOCAL_ACTION
	);
	
	
	$items['test/%'] = array (
		'title' => 'Test',
		'description' => 'This is a test',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'myform', 1,
		),
		'access callback' => true,
		
	);
	$items['scc/manager/joinCottageSeasonGuide'] = array (
		'title' => 'Select Seasonal Price Guide for Cottage',
		'description' => 'Cottage price guide',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
				'manager_select_cottage_price_season',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
				'manager'
		),
	);
	
	$items['scc/manager/viewrentals'] = array (
		'title' => 'View Confirmed Rentals / Checking Rentals',
		'description' => 'View Rentals',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'manager_view_rentals_form',
		),
		'menu_name' => 'cpsc',
		'access callback' => 'cpsc471_access',
		'access arguments' => array (
			'manager'
		),
	);
	
	return $items;
}

/**
 * Access callback for menu building
 * 
 * Accepts n argument, where arguments are permission names
 * 
 * @return boolean
 * 		true if the user has all the provided permissions,
 * 		false otherwise
 */
function cpsc471_access() {
	//get the arguments provided
	$arguments = func_get_args();
	$user = new User();
	//check each argument
	foreach($arguments as $permission) {
		if(!$user->hasPermission($permission)) {
			return false;
		}
	}
	
	return true;
}

/**
 * Main router for the website
 * 
 * If user is logs in checks them for manager role and redirects there,
 * otherwise directs to user page
 * 
 * If they are not logged in, it will provided a form for creating 
 * an account
 * 
 */
function home_form($form, &$form_state) {
	
	$user = new User();
	//$user->setRole('Manager', false);
	if($user->loggedIn()) {
		
		if($user->hasRole('Manager')) {
			drupal_goto('scc/manager');
		} else {
			$user->setRole('Renter');
			drupal_goto('scc/renter');
		}
	}
	
	drupal_set_title('Create Account');
	
	$form['name'] = array (
		'#title' => 'Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['email'] = array (
		'#title' => 'eMail',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['password'] = array (
		'#title' => 'Password',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['credit_card'] = array (
		'#title' => 'Credit Card Number',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['phone_number'] = array (
		'#title' => 'Phone number',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Account',
		'#submit' => array(
			'home_form_submit'
		),
		'#validate' => array(
			'home_form_validate',
		)
	);
	
	return $form;
}

function home_form_validate($form, $form_state){
	if(!Validator::isCreditCardValid($form_state['values']['credit_card'])){
		form_set_error('credit_card', "Invalid Credit Card Format.");
	}
	if(!Validator::isPhoneNumberValid($form_state['values']['phone_number'])){
		form_set_error('phone_number', "Invalid Phone number Format.");
	}
	if(!Validator::isEmailValid($form_state['values']['email'])){
		form_set_error('email', "Invalid email format");
	}
}


/**
 * Creates a new account in both the drupal user table and the rental_account table
 */
function home_form_submit($form, $form_state) {	
	$email = $form_state['values']['email'];
	$password = $form_state['values']['password'];
	$name = $form_state['values']['name'];
	$credit_card = $form_state['values']['credit_card'];//Not saved yet
	$phone = $form_state['values']['phone_number'];
	
	
	//create the new drupal user
	$user = new User();
	$user->setProperty('name', $email);
	$user->setProperty('mail', $email);
	$user->setProperty('pass', $password);
	$user->create();
	//log the new user in
	$user->login();
	$user->setRole('Renter');
	
	//create the initial renter
	$renter = new Renter('new');
	$renter->setProperty('account_uid', $user->getProperty('uid'));
	$renter->setProperty('name', $name);
	$renter->setProperty('is_adult', 1);
	$renter->create();
		
	//create the new account now that we can link the renter and the drupal account
	$account = new RentalAccount();
	$account->setProperty('uid', $user->getProperty('uid'));
	$account->setProperty('credit_card', $credit_card);
	$account->setProperty('phone', $phone);
	$account->setProperty('primary_renter_id', $renter->getProperty('id'));
	$account->create();
	
	//set a friendly message
	drupal_set_message('Account Created, you have been logged into your account.');
}



function manager_home_form($form, &$form_state) {
	$form['test'] = array (
			'#markup' => 'manager',
	);

	return $form;
}


function manager_view_price_guides_form($form, &$form_state) {
	//get all price guides
	$guides = CottagePriceGuide::instanceLoadMultiple();
	
	// create the table hearder
	$header = array (
		'name' => array (
			'data' => 'Name'
		),
		'two_day' => array (
			'data' => 'Two Day Price',
		),
		'three_day'=> array (
			'data' => 'Three Day Price',
		),
		'week '=> array (
			'data' => 'Week Price',
		),
		'rebook_discount' => array (
			'data' => 'Rebook Discount',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($guides as $guide) {
		$row = array('data' => array());
		$row['data']['name'] = $guide->getProperty('name');
		$row['data']['two_day'] = '$' . $guide->getProperty('two_day');
		$row['data']['three_day'] = '$' . $guide->getProperty('three_day');
		$row['data']['week'] = '$' . $guide->getProperty('week');
		$row['data']['rebook_discount'] = $guide->getProperty('rebook_discount') . '%';
		$rows[] = $row;
	}
	
	$form['season_table'] = array (
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,
		'#empty' => 'No price guides have been added',
	);
	
	return $form;
}

/**
 * Displays a form for entering a new price guide
 */
function manager_new_price_guide_form($form, &$form_state) {
	$form['name'] = array (
		'#type' => 'textfield',
		'#title' => 'Price Guide Name',
		'#required' => true,
	);
	
	$form['two_day'] = array (
		'#type' => 'textfield',
		'#title' => 'Two Day Rate',
		'#required' => true,
	);
	
	$form['three_day'] = array (
		'#type' => 'textfield',
		'#title' => 'Three Day Rate',
		'#required' => true,
	);
	
	$form['week'] = array (
		'#type' => 'textfield',
		'#title' => 'Week Rate',
		'#required' => true,
	);
	
	$form['rebook_discount'] = array (
		'#type' => 'textfield',
		'#title' => 'Rebook Discount (%)',
		'#required' => true,
	);
	
	$form['submit'] = array (
			
		'#type' => 'submit',
		'#value' => 'Create Price Guide',
		'#validate' => array('manager_new_price_guide_form_validate'),
		'#submit' => array('manager_new_price_guide_form_submit'),
	);
	
	return $form;
}

/**
 * Checks that the requested price guide name is unique
 */
function manager_new_price_guide_form_validate($form, &$form_state) {
	
	//check that the price guide name is unique
	$guide = new CottagePriceGuide('new', array(
		'name' => $form_state['values']['name'],
	));
	
	if($guide->existsInDB()) {
		form_set_error('name', 'A price guide with that name already exists');
	}
	
	if(intval($form_state['values']['two_day']) <= 0) {
		form_set_error('two_day', 'Prices must be positive numbers');
	}
	
	if(intval($form_state['values']['three_day']) <= 0) {
		form_set_error('three_day', 'Prices must be positive numbers');
	}
	
	if(intval($form_state['values']['week']) <= 0) {
		form_set_error('week', 'Prices must be positive numbers');
	}
	
	if(intval($form_state['values']['rebook_discount']) <= 0) {
		form_set_error('rebook_discount', 'Percents must be positive numbers');
	}
}

/**
 * Creates a new price guide
 */
function manager_new_price_guide_form_submit($form, &$form_state) {
	$guide = new CottagePriceGuide('new', $form_state['values']);
	$guide->create();
	drupal_set_message('Price Guide Created');
}

function manager_select_cottage_price_season($form, &$form_state){
	/*
	 * Select a cottage, price guide, and season, and then make an
	 * entry in the priced_for table containing the id of the cottage,
	 * start date of the season, and id of the price guide.
	 */
	$guides = CottagePriceGuide::instanceLoadMultiple();
	$seasons = Season::instanceLoadMultiple();
	$cottages = Cottage::instanceLoadMultiple();
	
	
	// don't know what this does lol
	//$form_state['storage']['save_value'] = intval($number);
	
	$guideOptions = array();
	foreach($guides as $guide) {
		$guideOptions[$guide->getProperty("id")] = $guide->getProperty('name');
	}
	
	$seasonOptions = array();
	foreach($seasons as $season) {
		$seasonOptions[$season->getProperty("start_time")] = $season->getProperty('name');
	}
	
	$cottageOptions = array();
	foreach($cottages as $cottage) {
		$cottageOptions[$cottage->getProperty("id")] = $cottage->getProperty('number');
	}
	
	$form['guideselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Guide name',
			'#options' => $guideOptions,
	);
	
	$form['seasonselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Season name',
			'#options' => $seasonOptions,
	);
	
	$form['cottageselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Cottage number',
			'#options' => $cottageOptions,
	);
	
	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Link Cottage To Price Guide',
			'#submit' => array(
					'select_cottage_price_season_submit'
			),
	);
	
	return $form;
}

function select_cottage_price_season_submit($form, $form_state){
	//scc_debug($form_state['values']);
	$pricedForVals = array(
			'cottage_id' => $form_state['values']['cottageselectfield'],
			'season_start_time' => $form_state['values']['seasonselectfield'],
			'cost_guide_id' => $form_state['values']['guideselectfield'],
	);
	
	$pf = new PricedFor('new', $pricedForVals);
	//$s->setCopy($seasonVals);
	$pf->create();
	drupal_set_message("Cottage, season, price guide joined.");
}

function manager_view_seasons_form($form, &$form_state) {
	//get all seasons
	$seasons = Season::instanceLoadMultiple();

	$format = 'F j, Y';
	
	// create the table hearder
	$header = array (
		'start_time' => array (
				'data' => 'Start Time'
		),
		'end_time' => array (
				'data' => 'End Time',
		),
		'name'=> array (
				'data' => 'Name',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($seasons as $season) {
		$row = array('data' => array());
		$row['data']['start_time'] = date($format , $season->getProperty('start_time'));
		$row['data']['end_time'] = date($format ,$season->getProperty('end_time'));
		$row['data']['name'] = $season->getProperty('name');
		$rows[] = $row;
	}
	
	$form['season_table'] = array (
			'#theme' => 'table',
			'#header' => $header,
			'#rows' => $rows,
			'#empty' => 'No seasons have been added',
	);
	
	return $form;
}

/**
 * Checks that the requested season name is unique
 */
function create_season_form_validate($form, &$form_state) {
	
	//check that the season name is unique
	$season = new Season('new', array(
			'name' => $form_state['values']['name'],
	));

	if($season->existsInDB()) {
		form_set_error('name', 'A season with that name already exists');
	}
	
}

function create_season_form_submit($form, $form_state){

	$seasonVals = array(
			'name' => $form_state['values']['name'],
			'start_time' => strtotime($form_state['values']['start_time']),
			'end_time' => strtotime($form_state['values']['end_time']),
	);
	//scc_debug($seasonVals);

	$s = new Season('new', $seasonVals);
	//$s->setCopy($seasonVals);
	$s->create();
	drupal_set_message("Season added.");

}

function manager_create_seasons_form($form, &$form_state) {
	drupal_set_title('New Season');
	$date = '2016-01-01';
	$format = 'Y-m-d';
	/*
	 *
		'#title' => 'Password',
		'#type' => 'textfield',
		'#required' => true,
	 */
	// gather list of information needed for a season
	$form['name'] = array(
			'#title' => 'Season name',
			'#type' => 'textfield',
			'#required' => true,
	);

	$form['start_time'] = array(
			'#title' => 'Start of season',
			'#type' => 'date_popup',
			'#default_value' => $date,
			'#date_format' => $format,
			'#required' => true,
	);
	
	$form['end_time'] = array(
			'#title' => 'End of season',
			'#type' => 'date_popup',
			'#default_value' => $date,
			'#date_format' => $format,
			'#required' => true,
	);

	// call function which adds the form contents to the seasons DB
	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Add Season',
			'#validate' => array(
					'create_season_form_validate'
			),
			'#submit' => array(
					'create_season_form_submit'
			),
	);

	return $form;
}

/**
 * Form with a table of boats and boat items to view
 */
function manager_view_boats_form($form, &$form_state) {
	// get ALLLL the boat items
	$boats = BoatItem::instanceLoadMultiple();
	
	// create that table
	$header = array (
			'type' => array (
					'data' => 'Type',
			),
			'name' => array (
					'data' => 'Name',
			),
			'capacity' => array (
					'data' => 'Capacity (for watercraft)',
			),
			'duration' => array (
					'data' => 'Duration (hours)',
			),
			'price' => array (
					'data' => 'Price',
			),
	);
	
	$rows = array();
	
	$boatRates = BoatItemRate::instanceLoadMultiple();
	
	foreach($boats as $item) {
		$boatRates = BoatItemRate::instanceLoadMultiple(array('item_id' => $item ->getProperty('id')));
		$item_duration = '';
		$item_price = '';
		foreach($boatRates as $item_rate){
			$item_duration .= $item_rate ->getProperty('duration'). '<br>';
			$item_price .= '$' . $item_rate ->getProperty('price') . '<br>';
		}
		if(count($boatRates) == 0){
			$item_duration = 'No price guide.';
			$item_price = 'No price guide.';
		}
		
		$row = array('data' => array() );
		$row['data']['type'] = $item ->getProperty('type');
		$row['data']['name'] = $item ->getProperty('name');
		$row['data']['capacity'] = $item ->getProperty('capacity');
		$row['data']['duration'] = $item_duration;
		$row['data']['price'] = $item_price;
		$rows[] = $row;
	}
	
	$form['boat_table'] = array (
			'#theme' => 'table',
			'#header' => $header,
			'#rows' => $rows,
			'#empty' => 'No boats or accessories have been added',
	);
	
	return $form;
}
/**
 * Form for creating new boat or boat-item
 */
function manager_new_boat_form($form, &$form_state){
	drupal_set_title('New Boat or Accessory');
	
	$form['typeselectfield'] = array (
			'#title' => 'Boat/Accessory Type',
			'#type' => 'select',
			'#required' => true,
			'#options' => array (
				'Boat' => 'Boat', 'Tube' => 'Tube', 'Kayak' => 'Kayak', 'Canoe' => 'Canoe',
				'Skis' => 'Skis', 'Paddleboard' => 'Paddleboard', 'Life Jacket' => 'Life Jacket', 'Bumper' => 'Bumper',
				'Rope' => 'Rope', 'Other' => 'Other',),
	);
	
	$form['name'] = array (
			'#title' => 'Name of Boat/Accessory',
			'#type' => 'textfield',
			'#required' => true,
	);
	
	$form['capacity'] = array (
			'#title' => 'Capacity (for a boat)',
			'#type' => 'textfield',
	);
	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Create Boat/Accessory',
			'#validate' => array (
					'manager_new_boat_form_validate'
			),
			'#submit' => array (
					'manager_new_boat_form_submit'
			),
	);
	
	return $form;
}

/**
 * Performs necessary checks when making new boat
 */
function manager_new_boat_form_validate($form, &$form_state) {
	//fix capitalization on name
	$boat_name = $form_state['values']['name'];
	$boat_name = ucwords(strtolower($boat_name));
	$form_state['values']['name'] = $boat_name;
	
	//scc_debug($form_state['values']);
	
	if($form_state['values']['typeselectfield'] == 'Boat'){
		if(!Validator::isPositive($form_state['values']['capacity']) 
				|| !($form_state['values']['capacity']) ) {
			form_set_error('capacity', 'capacity must be positive.');
		}
	}
	else{
		$form_state['values']['capacity'] = '0';
	}
	
	/*
	if(!Validator::isPositive($form_state['values']['duration'])) {
		form_set_error('duration', 'Duration of Rental must be positive');
	}
	
	if(!Validator::isPositive($form_state['values']['price'])) {
		form_set_error('price', 'Price must be positive');
	}
	*/
}

/**
 * Creates a new boat from the form_state,
 *  and sets a relevant message
 */
function manager_new_boat_form_submit($form, &$form_state) {
	
	//scc_debug($form_state['values']);
	
	$values = $form_state['values'];
	
	//create and initializat the cottage
	$boat = new BoatItem();
	$boat->setProperty('type', $values['typeselectfield']);
	$boat->setProperty('name', $values['name']);
	$boat->setProperty('capacity', $values['capacity']);
	
	//this create a starting point for a database interaction,
	//on error it can be reverted to the initial state, this should be used on any multitable interaction
	$t = db_transaction();
	//attempt to create the boat item
	try {
		if ($boat->create()) {
			drupal_set_message('Boat Item Created Successfully.');
		} else {
			drupal_set_message('Boat Item already exists, and was not created.', 'error');
		}
	} catch (PDOException $e) {
		drupal_set_message('An error occurred while creating a boat item: ' . $e->getMessage(), 'error');
		$t->rollback();
	}
}

function manager_create_boat_price($form, &$form_state){
	/*
	 * Select a Boat Item, and make a boat rental item rate for it.
	 */
	//$rates = BoatItemRate::instanceLoadMultiple();
	$boats = BoatItem::instanceLoadMultiple();
	//$cottages = Cottage::instanceLoadMultiple();


	// don't know what this does lol
	//$form_state['storage']['save_value'] = intval($number);

	$boatOptions = array();
	foreach($boats as $boat) {
		$boatOptions[$boat->getProperty("id")] = ($boat->getProperty('type') . ' - ' . $boat->getProperty('name'));
	}

	$form['boatselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Select Boat/Accessory name',
			'#options' => $boatOptions,
	);
	
	$header = array (
			'message' => array (
					'message' => 'Information for renting this item:',
			),
	);
	
	$form['duration'] = array (
			'#title' => 'Duration of Rental - In Hours',
			'#type' => 'textfield',
			'#required' => true,
	);
	$form['price'] = array (
			'#title' => 'Cost to Rent for Above Duration',
			'#type' => 'textfield',
			'#required' => true,
	);
	
	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Set Rental Rate',
			'#validate' => array (
					'create_boat_price_validate'
			),
			'#submit' => array(
					'create_boat_price_submit'
			),
	);

	return $form;
}


/**
 * Performs necessary checks when making new boat rental item rate
 */
function create_boat_price_validate($form, &$form_state) {

	//scc_debug($form_state['values']);

	
	if(!Validator::isPositive($form_state['values']['duration'])) {
		form_set_error('duration', 'Duration of Rental must be positive');
	}

	if(!Validator::isPositive($form_state['values']['price'])) {
		form_set_error('price', 'Price must be positive');
	}
	
}

/**
 * Creates a new boat rental item rate from the form_state,
 *  and sets a relevant message
 */
function create_boat_price_submit($form, &$form_state) {

	//scc_debug($form_state['values']);

	$values = $form_state['values'];

	$format = 
	//create and initializat the cottage
	$boatRate = new BoatItemRate();
	$boatRate->setProperty('start_time', time());
	$boatRate->setProperty('duration', $values['duration']);
	$boatRate->setProperty('item_id', $values['boatselectfield']);
	$boatRate->setProperty('price', $values['price']);

	//this create a starting point for a database interaction,
	//on error it can be reverted to the initial state, this should be used on any multitable interaction
	$t = db_transaction();
	//attempt to create the boat item
	try {
		if ($boatRate->create()) {
			drupal_set_message('Boat Rental Item Rate Created Successfully.');
		} else {
			drupal_set_message('Boat Rental Item Rate already exists, and was not created.', 'error');
		}
	} catch (PDOException $e) {
		drupal_set_message('An error occurred while creating a boat rental item rate: ' . $e->getMessage(), 'error');
		$t->rollback();
	}
}


/**
 * Form with a table of cottages to view
 */
function manager_view_cottages_form($form, &$form_state) {
	//get all the cottages
	$cottages = Cottage::instanceLoadMultiple();
	
	//create the table header
	$header = array (
		'number' => array (
			'data' => 'Number',
		),
		'class' => array (
			'data' => 'Class'
		),
		'max_adults' => array (
			'data' => 'Max Adults',
		),
		'base_adults '=> array (
			'data' => 'Base Adults',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($cottages as $cottage) {
		$row = array('data' => array());
		$row['data']['number'] = $cottage->getProperty('number');
		$row['data']['class'] = $cottage->getProperty('class_name');
		$row['data']['max_adults'] = $cottage->getProperty('max_adults');
		$row['data']['base_adults'] = $cottage->getProperty('base_adults');
		$rows[] = $row;
	}
	
	$form['cottage_table'] = array (
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,
		'#empty' => 'No cottages have been added',
	);
	
	return $form;
}

/**
 * Form for creating a new cottage
 */
function manager_new_cottage_form($form, &$form_state) {
	drupal_set_title('New Cottage');
	
	$form['cottage_class'] = array (
		'#title' => 'Class Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['cottage_number'] = array (
		'#title' => 'Cottage Number',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['max_adults'] = array (
		'#title' => 'Maximum Adults',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['base_adults'] = array (
		'#title' => 'Base Number of Adults',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Cottage',
		'#submit' => array (
			'manager_new_cottage_form_submit'
		),
		'#validate' => array (
			'manager_new_cottage_form_validate'
		),
	);
	
	return $form;
}

/**
 * Checks that all the numbers are positive, and formats the class name
 */
function manager_new_cottage_form_validate($form, &$form_state) {
	//fix capitalization on class name
	$class_name = $form_state['values']['cottage_class'];
	$class_name = ucwords(strtolower($class_name));
	$form_state['values']['cottage_class'] = $class_name;
	
	$inputGood = true;
	
	if(!Validator::isPositive($form_state['values']['max_adults'])) {
		form_set_error('max_adults', 'Max adults count must be positive');
		$inputGood = false;
	}
	
	if(!Validator::isPositive($form_state['values']['base_adults'])) {
		form_set_error('base_adults', 'Base Adults count must be positive');
		$inputGood = false;
	}
	
	if(!Validator::isPositive($form_state['values']['cottage_number'])) {
		form_set_error('cottage_number', 'Cottage Number must be positive');
		$inputGood = false;
	}
	
	if($inputGood) {
		//check that the cottage number is unique
		$cottageNumber = intval($form_state['values']['cottage_number']);
		
		$cottage = new Cottage();
		$cottage->setProperty('number', $cottageNumber);
		if($cottage->existsInDB()) {
			form_set_error('cottage_number', 'Cottage number ' . $cottageNumber . ' already used');
		}
	}
	
}

/**
 * Creates a new cottage from the form_state, and sets a relevant message
 */
function manager_new_cottage_form_submit($form, &$form_state) {
	$values = $form_state['values'];
	
	//create and initializat the cottage
	$cottage = new Cottage();
	$cottage->setProperty('max_adults', $values['max_adults']);
	$cottage->setProperty('base_adults', $values['base_adults']);
	$cottage->setProperty('number', $values['cottage_number']);
	$cottage->setProperty('class_name', $values['cottage_class']);
	
	//this create a starting point for a database interaction,
	//on error it can be reverted to the initial state, this should be used on any multitable interaction
	$t = db_transaction();
	//attempt to create the cottage
	try {
		if ($cottage->create()) {
			drupal_set_message('Cottage Created Successfully.');
		} else {
			drupal_set_message('Cottage already exists, and was not created.', 'error');
		}
	} catch (PDOException $e) {
		drupal_set_message('An error occurred while creating a cottage: ' . $e->getMessage(), 'error');
		$t->rollback();
	}
}

function manager_view_rentals_form($form, &$form_state) {
	helper_add_cottage_table($form, $form_state);
	helper_add_boat_table($form, $form_state);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Check in selected rentals',
		'#submit' => array('manager_view_rentals_submit'),
	);
	
	return $form;
}

function manager_view_rentals_submit($form, &$form_state) {
	$currentTimestamp = time();
	
	
	foreach($form_state['values']['cottage_table'] as $rentalID => $shouldCheckIn) {
		if($shouldCheckIn) {
			$rental = new Rental('standard', array(
				'rental_id' => $rentalID,
			));
			
			if($rental->getProperty('actual_arrival_time') == null) {
				$rental->updateInDB(array(
					'actual_arrival_time' => $currentTimestamp,
				));
			}
					
		}
	}
	
}

function helper_add_cottage_table(&$form, &$form_state) {
		
	$form['search_fieldset'] = array (
		'#type' => 'fieldset',
		'#title' => 'Cottage Rental Search Options',
		'#collapsible' => true,
	);
	
	$form['search_fieldset']['cottage_search_bar'] = array (
		'#type' => 'textfield',
		'#title' => 'Search by Cottage Number or Client Name',
	);
	
	$form['search_fieldset']['sort_type'] = array (
		'#type' => 'radios',
		'#title' => 'Sort Options',
		'#options' => array (
			'name' => 'Sort By Contact Name',
			'date' => 'Sort By Start Date',
		),
		'#default_value' => 'date',
	);
	
	$form['search_fieldset']['apply_cottage_search'] = array (
		'#type' => 'button',
		'#value' => 'Search',
		'#ajax' => array (
			'wrapper' => 'cottage_table',
			'callback' => 'cottage_callback',
		),
		'#name' => 'cottage_search',
	);
	
	$form['cottage_set'] = array (
		'#prefix' => '<div id="cottage_table">',
		'#suffix' => '</div>'
	);
	
	//grab the cottage rentals
	$rentals = Rental::instanceLoadMultiple(array(
		'rental_type' => 'Cottage',
		'has_been_confirmed' => 1,
	));
	
	$search_string = isset($form_state['values']['cottage_search_bar']) ? $form_state['values']['cottage_search_bar'] : '';
	$sort_type = isset($form_state['values']['sort_type']) ? $form_state['values']['sort_type'] : 'date';
		
	apply_cottage_search($rentals, $search_string, $sort_type);
	
	$header = array (
		'cottage_number' => 'Cottage Number',
		'start_date' => 'Start Date',
		'duration' => 'End Date',
		'estimated_arrival_time' => 'Estimated Arrival Time',
		'actual_arrival_time' => 'Actual Arrival Time',
		'primary_contact_name' => 'Primary Contact Name',
		'primary_contact_email' => 'Primary Contact Email',
		'primary_contact_cc' => 'Primary Contact Credit Card',
		'primary_contact_phone' => 'Primary Contact Phone Number',
		'price' => 'Price',
	);
	
	$options = buildCottageOptions($rentals);
	$defaults = array();
	
	foreach($rentals as $rental) {
		if($rental->getProperty('actual_arrival_time') != null) {
			
			$rentalID = $rental->getProperty('rental_id');
			$defaults[$rentalID] = true;
		}
	}
	
	$form['cottage_set']['cottage_table'] = array (
		'#type' =>'tableselect',
		'#header' => $header,
		'#options' => $options,
		'#default_value' => $defaults,
		'#empty' => 'No Cottage Rentals Added',
		'#prefix' => '<label>Select Rentals To Check In</label>',
	);
	
	if(isset($form_state['triggering_element'])) {
		if($form_state['triggering_element']['#name'] == 'cottage_search') {
			drupal_set_message('Search Applied');
		}
		
		$form['cottage_set']['cottage_table']['#empty'] = 'No results matched the search';
	}
}

/**
 * Builds the options array for the tableselect on the manager view rentals forms
 * @param Rental[] $rentals
 */
function buildCottageOptions($rentals) {
	$format = 'F j, Y';
	$formatTime = 'F j, Y G:i';
	
	$options = array();
	
	foreach($rentals as $rental) {
		$row = array();
		
		$row['cottage_number'] = '';

		
		$rental->loadRentedItems();
		$items = $rental->getProperty('rentedItems');
		
		foreach($items as $item) {
			if($row['cottage_number'] != '') {
				$row['cottage_number'] .= '<br>';
			}
			
			$row['cottage_number'] .= $item->getProperty('number');
		}
		
		$row['start_date'] = date($format, $rental->getProperty('start_time'));
		$row['duration'] = $rental->getProperty('duration') / 24;
		$row['estimated_arrival_time'] = date($formatTime, $rental->getProperty('estimated_arrival_time'));
		$row['actual_arrival_time'] = $rental->getProperty('actual_arrival_time') != null ? date($formatTime, $rental->getProperty('actual_arrival_time')) : 'Not Checked In Yet';
		
		$rental->loadRentalAccount();
		
		$account = $rental->getProperty('rentalAccount');
		
		$renter = new Renter('standard', array(
			'id' => $account->getProperty('primary_renter_id'),
			'account_uid' => $account->getProperty('uid'),
		));
		
		$row['primary_contact_name'] = $renter->getProperty('name');
		
		$u = new User('standard', array(
			'uid' => $account->getProperty('uid'),
		));
		
		$row['primary_contact_email'] = $u->getProperty('mail');
		$row['primary_contact_cc'] = $account->getProperty('credit_card');
		$row['primary_contact_phone'] = $account->getProperty('phone');
		
		$row['price'] = '$' . $rental->getPrice();
		
		$rentalID = $rental->getProperty('rental_id');
		$options[$rentalID] = $row;
		
	}
	
	
	
	
	return $options;
}

/**
 * 
 * @param Rental[] $rentals
 * @param string $search_string
 * @param string $sort_type
 */
function apply_cottage_search(&$rentals, $search_string, $sort_type) {
	$search_string = '*' . preg_quote($search_string) . '*';
	
	
	foreach($rentals as $i => $rental) {
		if(!cottage_search_match($rental, $search_string)) {
			unset($rentals[$i]);
		}
	}
	
	/**
	 * Apply the sort types, these use anonymous functions
	 * to apply the sort (kind of like function pointers)
	 */
	if($sort_type == 'date') {
		usort($rentals, function($left, $right){
			$lDate = $left->getProperty('start_time');
			$rDate = $right->getProperty('start_time');
			
			if($lDate < $rDate) {
				return 1;
			} else if($lDate == $rDate) {
				return 0;
			} else {
				return -1;
			}
		});
	} else { //else sort by client name
		usort($rentals, function($left, $right){
			$left->loadRentalAccount();
			$right->loadRentalAccount();
			
			$laccount = $left->getProperty('rentalAccount');
			$raccount = $right->getProperty('rentalAccount');
			
			$lrenter = new Renter('standard', array(
				'id' => $laccount->getProperty('primary_renter_id'),
				'account_uid' => $laccount->getProperty('uid'),
			));
			
			$rrenter = new Renter('standard', array(
				'id' => $raccount->getProperty('primary_renter_id'),
				'account_uid' => $raccount->getProperty('uid'),
			));
			
			$rname = $rrenter->getProperty('name');
			
			return  -strcmp($lname, $rname);
		});
	}
}

/**
 * 
 * @param Rental $rental
 * @param string $search_string
 * 
 * @return bool
 * 		true if the search string matches the provided rental, false otherwise
 */
function cottage_search_match($rental, $search_string) {
	$rental->loadRentedItems();
	
	$items = $rental->getProperty('rentedItems');
	
	foreach($items as $item) {
		$number =  $item->getProperty('number');
		
		if(preg_match($search_string, $number) == 1) {
			return true;
		}
		
	}
	
	$rental->loadRentalAccount();
	
	$account = $rental->getProperty('rentalAccount');
	
	$renter = new Renter('standard', array(
		'id' => $account->getProperty('primary_renter_id'),
		'account_uid' => $account->getProperty('uid'),
	));
	
	$name = $renter->getProperty('name');
	
	if(preg_match($search_string, $name) == 1) {
		return true;
	}
	
	return false;
}

function cottage_callback($form, $form_state) {
	return $form['cottage_set'];
}

function helper_add_boat_table(&$form, &$form_state) {
	
}

function renter_home_form($form, &$form_state) {
	$form['test'] = array (
		'#markup' => 'renter',	
	);
	
	$testThang = new BoatItem();

	return $form;
}


function renter_add_renters_form($form, &$form_state) {
	drupal_set_title('New Renter');
	
	$date = '2016-01-01';
	$format = 'Y-m-d';
	
	$form['name'] = array (
		'#title' => 'Name',
		'#type' => 'textfield',
		'#required' => true,
	);
	
	$form['is_adult'] = array (
		'#title' => 'Is Adult',
		'#type' => 'checkbox',
	);
	
	$form['age'] = array (
		'#title' => 'Age',
		'#description' => 'If not an adult, please provide a birthdate',
		'#type' => 'date_popup',
		'#date_year_range' => '-18:+0',
		'#default_value' => $date,
		'#date_format' => $format,
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Create Renter',
		'#submit' => array('renter_add_renters_form_submit'),
	);
		
	return $form;
}

function renter_add_renters_form_submit($form, &$form_state) {
	$birth_time = strtotime($form_state['values']['age']);
	
	$user = new User();
	
	$renter = new Renter('new', array(
		'name' => $form_state['values']['name'],
		'is_adult' => $form_state['values']['is_adult'],
		'birth_time' => $form_state['values']['is_adult'] ? null : $birth_time,
		'account_uid' => $user->getProperty('uid'),
	));
	
	$renter->create();
	
	drupal_set_message('Renter Created');
}

function renter_view_renters_form($form, &$form_state) {
	$user = new User();
	$format = 'F j, Y';
		//get all the renters
	$renters = Renter::instanceLoadMultiple(array('account_uid' => $user->getProperty('uid')));
	
	//create the table header
	$header = array (
		'name' => array (
			'data' => 'Name',
		),
		'is_adult' => array (
			'data' => 'Is Adult'
		),
		'birth_date' => array (
			'data' => 'Birth Date',
		),
	);
	
	//iterate over each cottage and create a table row
	$rows = array();
	
	foreach($renters as $renter) {
		$row = array('data' => array());
		$row['data']['name'] = $renter->getProperty('name');
		$row['data']['is_adult'] = $renter->getProperty('is_adult') ? 'Yes' : 'No';
		$row['data']['birth_date'] = $renter->getProperty('birth_time') == null ? 'Not specified' : date($format, $renter->getProperty('birth_time'));
		$rows[] = $row;
	}
	
	$form['renter_table'] = array (
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,
		'#empty' => 'No renters have been added',
	);
	
	return $form;
	
	
}

function renter_create_boat_rental_form($form, &$form_state) {
	/*
	 * Things for them to pick:
	 * A Boat rental item
	 * A date
	 * A duration - ajax populated via boat_rental_item_rate
	 * Renters to accompany - ajax populated ONLY if a boat is selected... WAIL. 
	 */
	
	$items = BoatItem::instanceLoadMultiple();
	//show the availible boatRentalItems
	$itemOptions = array();
	foreach($items as $item) {
		$item->loadRentalItem();
	
		$existing_rates = BoatItemRate::instanceLoadMultiple(array('item_id' => $item ->getProperty('id')));
		// If there are no rates, don't add this to the list.
		
		if($existing_rates && $item->getProperty('rentalItem')->getProperty('is_active')) {
			$capacityString = '';
			if($item->getProperty('type') == 'Boat'){
				$capacityString = ' - Capacity: ' . $item->getProperty('capacity');
			}
			$itemOptions[$item->getProperty("id")] = $item->getProperty('type') . 
				' - ' . $item->getProperty('name') . $capacityString;
		}
	}
	
	$selected = isset($form_state['values']['itemselectfield']) ?
		$form_state['values']['itemselectfield'] : key($itemOptions);
	
	$form['itemselectfield'] = array (
			'#type' => 'select',
			'#title' => 'Boat/Accessory',
			'#options' => $itemOptions,
			'#default_value' => $selected, 
			'#required' => true,
			'#ajax' => array(
					// when 'event' occurs, drupal will do an ajax request in the bg,
					// usually the default value is sufficient (change for select elements)
					//'event' => 'change',
					'callback' => 'ajax_boat_item_dropdown_callback',
					'wrapper' => 'dropdown_duration_replace',
			),
	);
	
	$form['rental_date'] = array(
			'#title' => 'Rental',	//it says rental after this but that's suboptimal formatting
			'#type' => 'date_popup',
			'#default_value' => '2016-01-01',
			'#date_format' =>  'Y-m-d',
			'#required' => true,
	);
	
	$form['morning_afternoon_field'] = array (
			'#title' => 'Rental Time',
			'#type' => 'select',
			'#required' => true,
			'#options' => array (
					'08:00' => 'Morning Rental : 8:00 am',
					'14:00' => 'Afternoon Rental : 2:00 pm',
			),
	);
	// this is a drop down menu populated by values
	// in an items corresponding boat_rental_item_rate
	
	  $form['durationSelect'] = array (
		'#title' => 'Duration',
		'#type' => 'select',
	  	'#prefix' => '<div id = "dropdown_duration_replace">',
	  	'#suffix' => '</div>',
	  	//When the form is rebuilt during ajax processing, the $selected variable
	  	// will now have the new value and so the options will change.
		'#options' => _ajax_duration_get_second_dropdown_options($selected),
	  
	  	
	  	'#default_value' => isset($form_state['values']['durationSelect']) ?
	  		$form_state['values']['durationSelect'] : '',
	  		
		//'#required' => true,
	);
	 
	
	$u = new User();
	$uid = $u->getProperty('uid');
	
	$renters = Renter::instanceLoadMultiple(array('account_uid' => $uid));
	$options = array();
	//iterate over the renters and create a table row for them
	foreach($renters as $renter) {
		$options[$renter->getProperty('id')] = array('name' => $renter->getProperty('name'));
	}
	
	//TODO - edit so that renters are only selectable for BOAT type rentals. WAIL.
	$form['renters'] = array (
			'#type' => 'tableselect',
			'#prefix' => '<label>Select those participating in this rental:</label>',
			'#header' => array (
					'name' => 'Name',
			),
			'#options' => $options,
			'#empty' => 'Please contact someone important, you shouldn\'t have seen this',
	);

	$form['submit'] = array (
			'#type' => 'submit',
			'#value' => 'Place Rental',
			'#validate' => array('renter_create_boat_rental_form_validate'),
			'#submit' => array('renter_create_boat_rental_form_submit'),
	);
	
	return $form;
}

function renter_create_boat_rental_form_validate($form, &$form_state) {
	//TODO: 
	//scc_debug($form_state['values']);
	
	$start_time = strtotime($form_state['values']['rental_date']) + Validator::isHHMM($form_state['values']['morning_afternoon_field']);
	
	// need to get the duration in a slightly more complicated way because of the fancy ajax stuff
	$existing_rates = BoatItemRate::instanceLoadMultiple(array('item_id' => $form_state['values']['itemselectfield'],
															'start_time' => $form_state['values']['durationSelect']
	));
	
	if(!($existing_rates)){
		form_set_error('No rates found for this item.');
		return;
	}
	$duration = $existing_rates[0]->getProperty('duration');
	$boatItemID = $form_state['values']['itemselectfield'];
	
	if(!($duration)){
		form_set_error('durationSelect', 'Please pick a duration of the rental.');
	}
	
	if(!Validator::isBoatItemAvailable($boatItemID, $start_time, $duration)) {
		form_set_error('date', 'Boat/Accessory is unavailible at that time, please pick another time, item or duration');
	}
	
	$atLeast1Renter = false;
	foreach($form_state['values']['renters'] as $renter_row) {
		if($renter_row) {
			$atLeast1Renter = true;
			break;
		}
	}
	
	if(!$atLeast1Renter) {
		form_set_error('renters', 'You must choose at least 1 person to be responsible for this rental');
	}
	
}

function renter_create_boat_rental_form_submit($form, &$form_state) {
	//scc_debug($form_state['values']);
	
	$start_time = strtotime($form_state['values']['rental_date']) + Validator::isHHMM($form_state['values']['morning_afternoon_field']);
	// need to get the duration in a slightly more complicated way because of the fancy ajax stuff
	$existing_rates = BoatItemRate::instanceLoadMultiple(array('item_id' => $form_state['values']['itemselectfield'],
			'start_time' => $form_state['values']['durationSelect']
	));
	$duration = $existing_rates[0]->getProperty('duration');
	$boatItemID = $form_state['values']['itemselectfield'];
	
	$u = new User();
	
	//scc_debug();
	$rental = new Rental('new', array(
			'start_time' => $start_time,
			'renters_uid' => $u->getProperty('uid'),
			'duration' => $duration, //hours
			'estimated_arrival_time' => $start_time,
			//'returning' => Rental::isReturningRental($u->getProperty('uid')) ? 1 : 0,
			'rental_type' => 'BoatItem',
			
	));
	xdebug_break();
	$t = db_transaction();
	try {
		if($rental->create()) {
				
	
			$rental->linkItem($boatItemID);
			foreach($form_state['values']['renters'] as $renterID => $renter_row) {
				if($renter_row) {
					$rental->linkRenter($renterID);
				}
			}
				//no car for boaty float
			//$rental->addCar($licence, $make, $colour);
				
			//TODO: add link to approval
			drupal_set_message('Your rental has been reserved, please review it and approve it.'
						. 'your price for this rental is: $' . $rental->getPrice());
				
		} else {
			drupal_set_message('An error occurred while creating a rental, please try again');
		}
	} catch (Exception $e) {
		drupal_set_message($e->getMessage() . "<br>" .$e->getTraceAsString(), 'error');
		$t->rollback();
	}
	
}

function ajax_boat_item_dropdown_callback($form, $form_state) {
	return $form['durationSelect'];
}

function  _ajax_duration_get_second_dropdown_options($key = '') {
	
	// based on the id of key (boatrentalitemID) we select
	// the values in boatRentalItemRate with the same key and return those durations.
	
	$rates = BoatItemRate::instanceLoadMultiple(array('item_id' => $key));
	$options = array();
	//iterate over the renters and create a table row for them
	foreach($rates as $rate) {
		//TODO for now this will pretty much always be true, since our interface
		// for making rental rates doesn't have date selection. so all
		// rental rates created for an item will be valid until that's changed.
		// KEEP IN MIND THO that time() won't work, it should be the time the user's selected
		// for their rental.
		//if($rate->getProperty('start_time') < time() 
		//		&& ($rate->getProperty('end_time') == null) || $rate->getProperty('end_time') > time())
		//{
		$options[$rate->getProperty('start_time')] = $rate->getProperty('duration') .
			' hours : $' . $rate->getProperty('price');
		//}
	}
	
	return $options;
	
}

function renter_create_rental_form($form, &$form_state) {
	
	/*
	 * Things for them to pick:
	 * A cottage
	 * A start date
	 * A duration
	 * Renters to accompany
	 * A Car
	 */
	
	$cottages = Cottage::instanceLoadMultiple();
	
	//show the availible cottages
	$cottageOptions = array();
	foreach($cottages as $cottage) {
		$cottage->loadRentalItem();
		
		if($cottage->getProperty('rentalItem')->getProperty('is_active')) {
			$cottageOptions[$cottage->getProperty("id")] = $cottage->getProperty('number');
		}	
	}
	
	$form['cottage'] = array (
		'#type' => 'select',
		'#title' => 'Cottage number',
		'#options' => $cottageOptions,
	);
	
	
	$form['start_time'] = array(
		'#title' => 'Start of Rental',
		'#type' => 'date_popup',
		'#default_value' => '2016-01-01',
		'#date_format' =>  'Y-m-d',
		'#required' => true,
	);
	
	$form['estimated_arrival_time'] = array (
		'#type' => 'textfield',
		'#title' => 'Estimated Arrival Time (hh:mm, 24h time)',
		'#required' => 'true',
	);
	
	$form['duration'] = array (
		'#title' => 'Duration',
		'#type' => 'select',
		'#options' => array (
			2 => 'Two Days',
			3 => 'Three Days',
			7 => 'Seven Days',
		),
		'#required' => true,
	);
	
	$u = new User();
	$uid = $u->getProperty('uid');
	
	$renters = Renter::instanceLoadMultiple(array('account_uid' => $uid));
	$options = array();
	//iterate over the renters and create a table row for them
	foreach($renters as $renter) {
		$options[$renter->getProperty('id')] = array('name' => $renter->getProperty('name'));
	}
	
	
	$form['renters'] = array (
		'#type' => 'tableselect',
		'#prefix' => '<label>Who is going on this trip, mate?</label>',
		'#header' => array (
			'name' => 'Name',
		),
		'#options' => $options,
		'#empty' => 'Please contact someone important, you shouldn\'t have seen this',
	);
	
	
	$form['car_fieldset'] = array (
		'#type' => 'fieldset',
		'#title' => 'Provide Car information',
		'#collapsible' => true,
	);
	
	$form['car_fieldset']['licence_plate'] = array (
		'#type' => 'textfield',
		'#title' => 'Licence Place Number',
	);

	$form['car_fieldset']['colour'] = array (
		'#type' => 'textfield',
		'#title' => 'Color of the Car i.e Blue',
	);
	
	$form['car_fieldset']['make'] = array (
		'#type' => 'textfield',
		'#title' => 'Make of the Car i.e Ford',
	);
	
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Place Rental',
		'#submit' => array('renter_create_rental_form_submit'),
		'#validate' => array('renter_create_rental_form_validate'),
	);
	
	return $form;
}

function renter_create_rental_form_validate($form, &$form_state) {
	$start_time = strtotime($form_state['values']['start_time']);
	$duration = $form_state['values']['duration'];
	$cottageID = $form_state['values']['cottage'];
	
	$message;
	if(!Validator::isCottageAvailable($cottageID, $start_time, $duration, $message)) {
		form_set_error('start_time', $message);
	}
	
	if(!Validator::isName($form_state['values']['make'])) {
		form_set_error('make', 'Make must be letters only');
	}
	
	if(!Validator::isName($form_state['values']['colour'])) {
		form_set_error('colour', 'Make must be letters only');
	}
	
	$atLeast1Renter = false;
	foreach($form_state['values']['renters'] as $renter_row) {
		if($renter_row) {
			$atLeast1Renter = true;
			break;
		}
	}
	
	if(!$atLeast1Renter) {
		form_set_error('renters', 'You must choose at least 1 person to accompany you');
	}
	
	if(false === $seconds = Validator::isHHMM($form_state['values']['estimated_arrival_time'])) {
		form_set_error('estimated_arrival_time', 'Please enter a valid estimated arrival time (hh:mm)');
	} else {
		$form_state['values']['estimated_arrival_time'] = $seconds;
	}
}

function renter_create_rental_form_submit($form, &$form_state) {
	$start_time = strtotime($form_state['values']['start_time']);
	$duration = $form_state['values']['duration'];
	$cottageID = $form_state['values']['cottage'];
	$licence = $form_state['values']['licence_plate'];
	$make = $form_state['values']['make'];
	$colour = $form_state['values']['colour'];
	
	$u = new User();
	$return = Rental::isReturningRental($start_time, $u->getProperty('uid')) ? 1 : 0;
	
	$rental = new Rental('new', array(
		'start_time' => $start_time,
		'renters_uid' => $u->getProperty('uid'),
		'duration' => $duration * 24, //hours per day
		'estimated_arrival_time' => $start_time + $form_state['values']['estimated_arrival_time'],
		'returning' => $return,
		'rental_type' => 'Cottage',
	));
	
	$t = db_transaction();
	try {
		if($rental->create()) {
			
	
		
			$rental->linkItem($cottageID);
			foreach($form_state['values']['renters'] as $renterID => $renter_row) {
				if($renter_row) {
					$rental->linkRenter($renterID);
				}
			}
			
			$rental->addCar($licence, $make, $colour);
			
			//TODO: add link to approval
			drupal_set_message('Your rental has been reserved, please review it and approve it.'
						. 'your price for this rental is: $' . $rental->getPrice());
			
		} else {
			drupal_set_message('An error occurred while creating a rental, please try again');
		}
	} catch (Exception $e) {
		drupal_set_message($e->getMessage(), 'error');
		$t->rollback();
	}
}

/**
 * Shows a form where renters can view both their boat and cottage rentals in one place
 */
function renter_view_rentals_form($form, &$form_state) {
	$format = 'F j, Y';
	
	$u = new User();
	
	//get the cottage rentals
	$rentals = Rental::instanceLoadMultiple(array(
		'renters_uid' => $u->getProperty('uid'),
		'rental_type' => 'Cottage',
	));
	
	
	//create the table options
	$options = array();
	$defaults = array();
	$disabled = array();
	
	foreach($rentals as $rental) {
		
		$rental->loadRentedItems();
		$rentalID = $rental->getProperty('rental_id');
		
		$items = $rental->getProperty('rentedItems');

		$options[$rentalID] = array (
			'cottageNumber'	=> '',
			'start_date' => '',
			'duration' => '',
			'price' => ''
		);
		
		$defaults[$rentalID] = $rental->getProperty('has_been_confirmed');
		
		if($defaults[$rentalID]) {
			$disabled[] = $rentalID;
		} else {
			//$disabled[$rentalID] = false;
		}
		
		foreach($items as $itemID => $item) {
			if($options[$rentalID]['cottageNumber'] != '') {
				$options[$rentalID]['cottageNumber'] .= '<br>';
				$options[$rentalID]['start_date'] .= '<br>';
				$options[$rentalID]['duration'] .= '<br>';
				$options[$rentalID]['price'] .= '<br>';
			}
			
			
			$cottageNumber = $item->getProperty('number');
			$startDate = $rental->getProperty('start_time');
			$duration = $rental->getProperty('duration') / 24;
			$price = '$' . $rental->getPrice();
			
			$options[$rentalID]['cottageNumber'] .= $cottageNumber;
			$options[$rentalID]['start_date'] .= date($format, $startDate);
			$options[$rentalID]['duration'] .= $duration . ' days';
			$options[$rentalID]['price'] .= $price;
			
			
		}
	}
	
	$form['rental_table'] = array (
		'#type' => 'tableselect',
		'#prefix' => '<label>Cottage Rentals</label>',
		'#header' => array (
			'cottageNumber'	=> 'Cottage Number',
			'start_date' => 'Start Date',
			'duration' => 'Duration',
			'price' => 'Price'
		),
		'#options' => $options,
		'#default_value' => $defaults,
		//'#disabled' => $disabled,
		'#empty' => 'You don\'t have any Cottage Rentals',
	);
	
	
	//now repeat for boat rentals
	
	//get the boat rentals
	$rentals = Rental::instanceLoadMultiple(array(
		'renters_uid' => $u->getProperty('uid'),
		'rental_type' => 'BoatItem',
	));
	
	
	//create the table options
	$options = array();
	$defaults = array();
	$disabled = array();
	
	foreach($rentals as $rental) {
	
		$rental->loadRentedItems();
		$rentalID = $rental->getProperty('rental_id');
	
		$items = $rental->getProperty('rentedItems');
	
		$options[$rentalID] = array (
			'boatName'	=> '',
			'start_date' => '',
			'duration' => '',
			'price' => ''
		);
	
		$defaults[$rentalID] = $rental->getProperty('has_been_confirmed');
	
		if($defaults[$rentalID]) {
			$disabled[] = $rentalID;
		} 
	
		foreach($items as $itemID => $item) {
			if($options[$rentalID]['boatName'] != '') {
				$options[$rentalID]['boatName'] .= '<br>';
				$options[$rentalID]['start_date'] .= '<br>';
				$options[$rentalID]['duration'] .= '<br>';
				$options[$rentalID]['price'] .= '<br>';
			}
				
				
			$cottageNumber = $item->getProperty('name');
			$startDate = $rental->getProperty('start_time');
			$duration = $rental->getProperty('duration');
			$price = '$' . $rental->getPrice();
				
			$options[$rentalID]['boatName'] .= $cottageNumber;
			$options[$rentalID]['start_date'] .= date($format, $startDate);
			$options[$rentalID]['duration'] .= $duration . ' hours';
			$options[$rentalID]['price'] .= $price;
				
				
		}
	}
	
	$form['boat_rental_table'] = array (
		'#type' => 'tableselect',
		'#prefix' => '<label>Boat Rentals</label>',
		'#header' => array (
			'boatName'	=> 'Boat Name',
			'start_date' => 'Start Date',
			'duration' => 'Duration',
			'price' => 'Price'
		),
		'#options' => $options,
		'#default_value' => $defaults,
		//'#disabled' => $disabled,
		'#empty' => 'You don\'t have any Boat Rentals',
	);
	
	
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Confirm Selected Rentals',
		'#submit' => array('renter_view_rentals_submit'),
	);
	
	return $form;
	
}

/**
 * Flags the requested rentals as validated
 */
function renter_view_rentals_submit($form, &$form_state) {
	foreach($form_state['values']['rental_table'] as $rentalID => $shouldConfirm) {
		if($shouldConfirm) {
			$r = new Rental('standard', array(
				'rental_id' => $rentalID,
			));
				
			$r->loadRentedItems();
				
			$items = $r->getProperty('rentedItems');
				
			foreach($items as $item) {
				
					
				if($r->getProperty('has_been_confirmed') == 0) {
					
					if(!Validator::isCottageAvailable($item->getProperty('id'), $r->getProperty('start_time'), $r->getProperty('duration'))) {
						drupal_set_message('One of the rentals you have selected is no longer valid, someone else has beaten you to the punch, the rental has been deleted.', 'error');
						$r->deleteFromDB();
					} else {
					
						$r->updateInDB(array('has_been_confirmed' => 1));
						drupal_set_message('Rental Confirmed');
					}
				}
					
				//(else already confirmed)
			}
				
				
		}
	}
	
	foreach($form_state['values']['boat_rental_table'] as $rentalID => $shouldConfirm) {
		if($shouldConfirm) {
			$r = new Rental('standard', array(
				'rental_id' => $rentalID,
			));
	
			$r->loadRentedItems();
	
			$items = $r->getProperty('rentedItems');
	
			foreach($items as $item) {
				
						
				if($r->getProperty('has_been_confirmed') == 0) {
					
					if(!Validator::isBoatItemAvailable($item->getProperty('id'), $r->getProperty('start_time'), $r->getProperty('duration'))) {
						drupal_set_message('One of the rentals you have selected is no longer valid, someone else has beaten you to the punch, the rental has been deleted.', 'error');
						$r->deleteFromDB();
					} else {		
						$r->updateInDB(array('has_been_confirmed' => 1));
						drupal_set_message('Rental Confirmed');
					}
				}
						
				//(else already confirmed)
						
						
						
			}
	
	
		}
	}
}

////////////////////////////
//Demo code below this line
////////////////////////////

/**
 * Prints all arguments as drupal messages
 */
function scc_debug() {
	
	$args = func_get_args();
	
	foreach($args as $arg) {
		drupal_set_message('<pre>' . print_r($arg, true) . '</pre>', 'warning');
	}
	
}


function myform($form, &$form_state, $number) {
	
	db_query("SELECT * FROM Users");
	

	if(isset($form_state['storage']['save_value'])) {
		$number = $form_state['storage']['save_value'];
		$number *= 2;
	}
	
	
	$form['ex'] = array (
		'#prefix' => '<div id="my_div">',
		'#markup' => $number,	
		'#suffix' => '</div>',
	);
	
	$form_state['storage']['save_value'] = intval($number);
	
	$form['button'] = array (
		'#type' => 'fieldset',
		'#title' => 'fred',
		'button2' => array (
			'#type' => 'button',
			'#value' => 'fish',
				'#ajax' => array (
						'callback' => 'my_ajax',
						'wrapper' => 'my_div',
				),
		),
	);
	
	$form['textfield6'] = array (
		'#type' => 'textfield',	
	);
	
	$form['selectfield'] = array (
		'#type' => 'select',
		'#options' => array (
			'index1' => 'Option One',
			'index2' => 'Option Two',
		),
	);
	
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => 'Submit',
			
			
		'#validate' => array('validate'),
		'#submit' => array('submit'),
	);
	
	return $form;
}

function validate($form, &$form_state) {
	$form_state['values']['textfield6'] = intval($form_state['values']['textfield6'] );
	
	if($form_state['values']['textfield6'] == 0) {
		form_set_error('textfield6', "stop");
	}
}

function submit($form, &$form_state) {
	drupal_set_message($form_state['values']['textfield6']);
	drupal_goto('');
}

function my_ajax($form, $form_state) {
	return $form['ex'];
}
?>
