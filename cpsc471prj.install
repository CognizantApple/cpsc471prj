<?php
/**
 * Implements hook_install()
 * 
 * Called when the module is installed
 */
function cpsc471prj_install() {

	createMenuBlock();	
	createRoles();
	try{
		populate_Database_With_Example_Data();
	} catch(Exception $e){
		
		throw new Exception($e->getTraceAsString());
	}
}

/**
 * Implements hook_uninstall()
 *
 * Called when the module is uninstalled
 */
function cpsc471prj_uninstall() {
	//just delete the module roles for safety
	user_role_delete('Renter');
	user_role_delete('Manager');
}

/**
 * Creates the menu block for the module, must be manually enabled in structure->blocks
 * to be visible
 */
function createMenuBlock() {
	$menu = array (
			'menu_name' => 'cpsc',
			'title' => 'Scotch Creek Cottages',
			'description' => 'Menu block for the 471 module',
	);
	menu_save($menu);
}

/**
 * Creates the roles and permissions for the module in the database
 */
function createRoles() {
	//create the roles in the role table
	$role = new stdClass();
	$role->name = 'Renter';
	user_role_save($role);
	
	$role = new stdClass();
	$role->name = 'Manager';
	user_role_save($role);
	
	//set the permissions for the roles
	$rid = user_role_load_by_name('Renter')->rid;	
	user_role_grant_permissions($rid, array ('renter'));
	
		
	$rid = user_role_load_by_name('Manager')->rid;	
	user_role_grant_permissions($rid, array ('manager'));
}

/**
 * Implements hook_schema()
 * 
 * Describes the database layout to drupal
 */
function cpsc471prj_schema() {
	$schema = array();
	
	$schema['renter'] = array(
		'description' => 'Table containing each renter and their information',
		'fields' => array(
			'id' => array(
				'type' => 'serial',
				'not null' => true,
			),
			'account_uid' => array(
				'type' => 'int',
				'not null' => true,
			),
			'name' => array(
				'type' => 'varchar',
				'length' => 256,
				'not null' => true,
			),
			'is_adult' => array(
				'type' => 'int',
				'size' => 'tiny',
				'not null' => true,
			),
			'birth_time' => array(
				'type' => 'int',
				'size' => 'normal',
			),
		),
		'primary key' => array('id', 'account_uid'),
		'foreign keys' => array (
			'rental_account' => array (
				'table' => 'rental_account',
				'columns' => array(
					'account_uid' => 'uid',
				)
			),
		),
	);
	
	$schema['rental_account'] = array (
		'description' => 'The account info for particular renters',
		'fields' => array (
			'uid' => array (
				'type' => 'int',
				'not null' => true
			),
			'credit_card' => array (
				'type' => 'varchar',
				'length' => 60,
				'not null' => true,
			),
			'phone' => array (
				'type' => 'varchar',
				'length' => 60,
				'not null' => true,	
			),
			'primary_renter_id' => array (
				'type' => 'int',
			),
		),
		'primary key' => array ('uid'),
		'foreign keys' => array (
			'users' => array (
				'table' => 'users',
				'columns' => array(
					'uid' => 'uid',
				)
			),
			'renter' => array (
				'table' => 'renter',
				'columns' => array (
					'uid' => 'account_uid',
					'primary_renter_id' => 'id',
				),
			),
		),
	);
	
	$schema['rental'] = array(
		'description' => 'Information of a rental ',
		'fields' => array(
			'rental_id' => array(
				'type' => 'serial',
				'not null' => true,
			),
			'start_time' => array(
				'type' => 'int',
				'not null' => true,
			),
			'renters_uid' => array(
				'type' => 'int',
				'not null' => true,
			),
			'duration' => array(
				'type' => 'int',
				'not null' => true,
			),
			'actual_arrival_time' => array(
				'type' => 'int',
			),
			'estimated_arrival_time' => array(
				'type' => 'int',
				'not null' => true,
			),
			'returning' => array(
				'type' => 'int',
				'size' => 'tiny',
				'not null' => true,
				'default' => 0,
			),
			'rental_type' => array(
				'type' => 'varchar',
				'length' => 20,
				'not null' => true,
			),
			'has_been_confirmed' => array (
				'type' => 'int',
				'size' => 'tiny',
				'not null' => true,
				'unsigned' => true,
				'default' => 0,
			),
		),
		'primary key' => array('rental_id', 'renters_uid'),
		'foreign keys' => array (
			'rental_account' => array (
				'table' => 'rental_account',
				'columns' => array(
					'renters_uid' => 'uid',
				)
			),
		),
	);
	
	$schema['rental_renters'] = array(
		'description' => 'Information linking a rental to the renters and the renting account',
		'fields' => array(
			'renter_id' => array(
				'type' => 'int',
				'not null' => true,
			),
			'account_uid' => array(
				'type' => 'int',
				'not null' => true,
			),
			'rental_id' => array(
				'type' => 'int',
				'not null' => true,
			),
			'renters_uid' => array(
				'type' => 'int',
				'not null' => true,
			),
			
		),
		'primary key' => array('renter_id', 'account_uid', 'rental_id', 'renters_uid'),
		'foreign keys' => array (
			'rental' => array (
				'table' => 'rental',
				'columns' => array(
					'account_uid' => 'account_uid',
					'rental_id' => 'rental_id',
				)
			),
			'renter' => array (
				'table' => 'renter',
				'columns' => array(
					'renters_uid' => 'renters_uid',
					'renter_id' => 'renter_id',
				)
			),
		),
	);
	
	$schema['renters_car'] = array(
		'description' => 'Information about a renters car',
		'fields' => array(
			'liscence_plate' => array(
				'type' => 'varchar',
				'length' => 20,
				'not null' => true,
			),
			'rental_id' => array(
				'type' => 'int',
				'not null' => true,
			),
			'renter_uid' => array(
				'type' => 'int',
				'not null' => true,
			),
			'colour' => array(
				'type' => 'varchar',
				'length' => 20,
				'not null' => true,
			),
			'make' => array(
				'type' => 'varchar',
				'length' => 50,
				'not null' => true,
			),
		
		),
		'primary key' => array('liscence_plate', 'rental_id', 'renter_uid'),
		'foreign keys' => array (
			'rental' => array (
				'table' => 'rental',
				'columns' => array(
					'renter_uid' => 'account_uid',
					'rental_id' => 'rental_id',
				)
			),
		),
	);
	
	$schema['rented'] = array(
		'description' => 'Relationship table for rentable items, start times, and renters.',
		'fields' => array( // List of attributes/columns
				'rentable_item_id' => array(
						'type' => 'int',
						'not null' => true,
				),
				'rental_id' => array(
						'type' => 'int',
						'not null' => true,
				),
				'uid' => array(
						'type' => 'int',
						'not null' => true
				),
		),
		'primary key' => array('rentable_item_id', 'rental_id', 'uid'),
		'foreign keys' => array (
			'rental' => array (
				'table' => 'rental',
				'columns' => array(
					'uid' => 'account_uid',
					'rental_id' => 'rental_id',
				)
			),
			'rentable_item' => array (
				'table' => 'rentable_item',
				'columns' => array (
					'rentable_item_id' => 'id',
				),
			),
		),
	
	);
	
	$schema['season'] = array(
			'description' => 'Seaon start times, end times, and names.',
			'fields' => array( // List of attributes/columns
					'start_time' => array(
							'type' => 'int',
							'not null' => true,
					),
					'end_time' => array(
							'type' => 'int',
							'not null' => true,
					),
					'name' => array(
							'type' => 'varchar',
							'length' => 60,
							//'not null' => true,
					),
			),
			'primary key' => array('start_time')
	
	);
	
	$schema['boat_rental_item'] = array(
		'description' => 'Information pertaining to boats and boat accessories',
		'fields' => array( // List of attributes/columns
				'id' => array(
						'type' => 'int',
						'not null' => true,
				),
				'type' => array(
						'type' => 'varchar',
						'length' => 60,
						//'not null' => true,
				),
				'name' => array(
						'type' => 'varchar',
						'length' => 60,
						'not null' => true,
				),
				'capacity' => array(
						'type' => 'int',
						'not null' => true,
				),
		),
		'primary key' => array('id'),
		'foreign keys' => array (
			'rentable_item' => array (
				'table' => 'rentable_item',
				'columns' => array (
					'id' => 'id',
				),
			),
		),
	
	);

	$schema['rentable_item'] = array(
			'description' => 'Superclass for all rentable items',
			'fields' => array( // List of attributes/columns
					'id' => array(
							'type' => 'serial',
							'not null' => true,
					),
					'is_active' => array(
							'type' => 'int',
							'size' => 'tiny',
							'not null' => true,
							'default' => true,
					),
			),
			'primary key' => array('id')
	
	);
	
	$schema['cottage_price_guide'] = array(
			'description' => 'Master table of ids for accessing nightly and extra adult costs for Cottages.',
			'fields' => array( // List of attributes/columns
				'id' => array(
						'type' => 'serial',
						'not null' => true,
				),
				'name' => array (
					'type' => 'varchar',
					'length' => 256,
					'not null' => true,
				),
				'two_day' => array(
						'type' => 'int',
						'not null' => true,
				),
				'three_day' => array(
						'type' => 'int',
						'not null' => true,
				),
				'week' => array(
						'type' => 'int',
						'not null' => true,
				),
				'rebook_discount' => array(
						'type' => 'int',
						//'not null' => true,
						'default' => 0,
				),
			),
			'primary key' => array('id')
	
	);
	
	$schema['cottage'] = array(
		'description' => 'Information about Cottages, with their id.',
		'fields' => array( // List of attributes/columns
				'id' => array(
						'type' => 'int',
						'not null' => true,
				),
				'max_adults' => array(
						'type' => 'int',
						'not null' => true,
						//'default => 50, //???
				),
				'base_adults' => array(
						'type' => 'int',
						'not null' => true,
				),
				'number' => array(
						'type' => 'int',
						'not null' => true,
				),
				'class_name' => array(
						'type' => 'varchar',
						'length' => 60,
						//'not null' => true,
				),
		),
		'primary key' => array('id'),
		'foreign keys' => array (
			'rentable_item' => array (
				'table' => 'rentable_item',
				'columns' => array (
					'id' => 'id',
				),
			),
		),
	
	);
	
	$schema['boat_rental_item_rate'] = array(
		'description' => 'Rental rates for boats and boat accessories',
		'fields' => array( // List of attributes/columns
				'start_time' => array(
						'type' => 'int',
						'not null' => true,
				),
				'duration' => array(
						'type' => 'int',
						'not null' => true,
				),
				'item_id' => array(
						'type' => 'int',
						'not null' => true,
				),
				'price' => array(
						'type' => 'int',
						//'not null' => true,
						'default' => 0,
				),
				'end_time' => array(
						'type' => 'int',
				),
		),
		'primary key' => array('start_time', 'duration', 'item_id'),
		'foreign keys' => array (
			'boat_rental_item' => array (
				'table' => 'boat_rental_item',
				'columns' => array (
					'item_id' => 'id',
				),
			),
		),
		
	
	);
	
	$schema['priced_for'] = array(
		'description' => 'Relationship between Cottages, season, and cost guides.',
		'fields' => array( // List of attributes/columns
				'cottage_id' => array(
						'type' => 'int',
						'not null' => true,
				),
				'season_start_time' => array(
						'type' => 'int',
						//'size' => 'large',
						'not null' => true,
				),
				'cost_guide_id' => array(
						'type' => 'int',
						'not null' => true,
				),
		),
		'primary key' => array('cottage_id', 'season_start_time', 'cost_guide_id'),
		'foreign keys' => array (
			'cottage' => array (
				'table' => 'cottage',
				'columns' => array (
					'cottage_id' => 'id',
				),
			),
			'cottage_price_guide' => array (
				'table' => 'cottage_price_guide',
				'columns' => array (
					'cost_guide_id' => 'id',
				),
			),
			'season' => array (
				'table' => 'season',
				'columns' => array (
					'season_start_time' => 'start_time',
				),
			),
		),
		
	
	);
	
	return $schema;
}


function populate_Database_With_Example_Data() {
	//delete the users we plan to create, the uninstall hook wont erase users
	db_query("DELETE FROM `users` WHERE `users`.`name` = 'xXJohnSlayerXx'");
	db_query("DELETE FROM `users` WHERE `users`.`name` = 'xXTheRustlerXx'");
	db_query("DELETE FROM `users` WHERE `users`.`name` = 'xXTheWalDoXx'");
	db_query("DELETE FROM `users` WHERE `users`.`name` = 'manager'");
	

	$manager = new User();
	$manager->setProperty("name", "manager");
	$manager->setProperty("mail", "manager@shuswap.ca");
	$manager->setProperty("pass", "manager");
	$manager->create();
	$manager->setRole('Manager');
	
	$Cottages = array();
	$Cottages["Cottage0"] = new Cottage();
	$Cottages["Cottage0"]->setProperty("max_adults", "20");
	$Cottages["Cottage0"]->setProperty("base_adults", "2");
	$Cottages["Cottage0"]->setProperty("number", "420");
	$Cottages["Cottage0"]->setProperty("class_name", "Deluxe");
	$Cottages["Cottage0"]->create();
	
	$Cottages["Cottage1"] = new Cottage();
	$Cottages["Cottage1"]->setProperty("max_adults", "20");
	$Cottages["Cottage1"]->setProperty("base_adults", "2");
	$Cottages["Cottage1"]->setProperty("number", "410");
	$Cottages["Cottage1"]->setProperty("class_name", "Deluxe");
	$Cottages["Cottage1"]->create();
	
	$Cottages["Cottage2"] = new Cottage();
	$Cottages["Cottage2"]->setProperty("max_adults", "5");
	$Cottages["Cottage2"]->setProperty("base_adults", "2");
	$Cottages["Cottage2"]->setProperty("number", "400");
	$Cottages["Cottage2"]->setProperty("class_name", "Small");
	$Cottages["Cottage2"]->create();
	
	
	
	$Boats = array();
	$Boats["Boat0"] = new BoatItem();
	$Boats["Boat0"]->setProperty("type", "Boat");
	$Boats["Boat0"]->setProperty("name", "Wreck of the Edmund Fitzgerald");
	$Boats["Boat0"]->setProperty("capacity", "10");
	$Boats["Boat0"]->create();
	$Boats["Boat1"] = new BoatItem();
	$Boats["Boat1"]->setProperty("type", "Boat");
	$Boats["Boat1"]->setProperty("name", "Ship in a bottle");
	$Boats["Boat1"]->setProperty("capacity", "10");
	$Boats["Boat1"]->create();
	$Boats["Boat2"] = new BoatItem();
	$Boats["Boat2"]->setProperty("type", "Boat");
	$Boats["Boat2"]->setProperty("name", "The Black Pearl");
	$Boats["Boat2"]->setProperty("capacity", "10");
	$Boats["Boat2"]->create();
	
	$BoatItems = array();
	$BoatItems["Tube0"] = new BoatItem();
	$BoatItems["Tube0"]->setProperty("type", "tube");
	$BoatItems["Tube0"]->setProperty("name", "tooobular");
	$BoatItems["Tube0"]->setProperty("capacity", "307");
	$BoatItems["Tube0"]->create();
	$BoatItems["Kayak0"] = new BoatItem();
	$BoatItems["Kayak0"]->setProperty("type", "kayak");
	$BoatItems["Kayak0"]->setProperty("name", "The long nose");
	$BoatItems["Kayak0"]->setProperty("capacity", "5");
	$BoatItems["Kayak0"]->create();
	$BoatItems["Canoe0"] = new BoatItem();
	$BoatItems["Canoe0"]->setProperty("type", "canoe");
	$BoatItems["Canoe0"]->setProperty("name", "Old Bessy");
	$BoatItems["Canoe0"]->setProperty("capacity", "5");
	$BoatItems["Canoe0"]->create();
	
	
	$CottagePriceGuides = array();
	$CottagePriceGuides["Guide0"] = new CottagePriceGuide();
	$CottagePriceGuides["Guide0"]->setProperty("name", "averagePriceGuide");
	$CottagePriceGuides["Guide0"]->setProperty("two_day", "300");
	$CottagePriceGuides["Guide0"]->setProperty("three_day", "400");
	$CottagePriceGuides["Guide0"]->setProperty("week", "800");
	$CottagePriceGuides["Guide0"]->setProperty("rebook_discount", "25");
	$CottagePriceGuides["Guide0"]->create();
	$CottagePriceGuides["Guide1"] = new CottagePriceGuide();
	$CottagePriceGuides["Guide1"]->setProperty("name", "annoyingCustomerPriceGuide");
	$CottagePriceGuides["Guide1"]->setProperty("two_day", "500");
	$CottagePriceGuides["Guide1"]->setProperty("three_day", "700");
	$CottagePriceGuides["Guide1"]->setProperty("week", "1000");
	$CottagePriceGuides["Guide1"]->setProperty("rebook_discount", "20");
	$CottagePriceGuides["Guide1"]->create();
	
	$Seasons = array();
	$Seasons["Season0"] = new Season();
	$Seasons["Season0"]->setProperty("start_time", strtotime("june 1 2017"));
	$Seasons["Season0"]->setProperty("end_time", strtotime("august 30 2017"));
	$Seasons["Season0"]->setProperty("name", "Wabbit Season");
	$Seasons["Season0"]->create();
	$Seasons["Season1"] = new Season();
	$Seasons["Season1"]->setProperty("start_time", strtotime("september 1 2017"));
	$Seasons["Season1"]->setProperty("end_time", strtotime("october 31 2017"));
	$Seasons["Season1"]->setProperty("name", "That wierd time between summer and winter");
	$Seasons["Season1"]->create();
	
	$boatItemRateGuide = array();
	$boatItemRateGuide["Rate0"] = new BoatItemRate();
	$boatItemRateGuide["Rate0"]->setProperty("start_time", $Seasons["Season0"]->getProperty("start_time"));
	$boatItemRateGuide["Rate0"]->setProperty("duration", "48");
	$boatItemRateGuide["Rate0"]->setProperty("item_id", $Boats["Boat0"]->getProperty("id"));
	$boatItemRateGuide["Rate0"]->setProperty("price", "500");
	$boatItemRateGuide["Rate0"]->setProperty("end_time", $Seasons["Season0"]->getProperty("end_time"));
	$boatItemRateGuide["Rate0"]->create();
	$boatItemRateGuide["Rate1"] = new BoatItemRate();
	$boatItemRateGuide["Rate1"]->setProperty("start_time", $Seasons["Season1"]->getProperty("start_time"));
	$boatItemRateGuide["Rate1"]->setProperty("duration", "48");
	$boatItemRateGuide["Rate1"]->setProperty("item_id", $Boats["Boat1"]->getProperty("id"));
	$boatItemRateGuide["Rate1"]->setProperty("price", "500");
	$boatItemRateGuide["Rate1"]->setProperty("end_time", $Seasons["Season1"]->getProperty("end_time"));
	$boatItemRateGuide["Rate1"]->create();
	$boatItemRateGuide["Rate2"] = new BoatItemRate();
	$boatItemRateGuide["Rate2"]->setProperty("start_time", $Seasons["Season0"]->getProperty("start_time"));
	$boatItemRateGuide["Rate2"]->setProperty("duration", "48");
	$boatItemRateGuide["Rate2"]->setProperty("item_id", $Boats["Boat2"]->getProperty("id"));
	$boatItemRateGuide["Rate2"]->setProperty("price", "500");
	$boatItemRateGuide["Rate2"]->setProperty("end_time", $Seasons["Season0"]->getProperty("end_time"));
	$boatItemRateGuide["Rate2"]->create();
	
	$PricedFor = array();
	$PricedFor["PriceLink0"] = new PricedFor();
	$PricedFor["PriceLink0"]->setProperty("cottage_id", $Cottages["Cottage0"]->getProperty("id"));
	$PricedFor["PriceLink0"]->setProperty("season_start_time", $Seasons["Season0"]->getProperty("start_time"));
	$PricedFor["PriceLink0"]->setProperty("cost_guide_id", $CottagePriceGuides["Guide0"]->getProperty("id"));
	$PricedFor["PriceLink0"]->create();
	
	
	
	$johnUser = new User();
	$johnUser->setProperty("name", "xXJohnSlayerXx");
	$johnUser->setProperty("mail", "yotothat@tothatyo.yo");
	$johnUser->setProperty("pass", "password");
	$johnUser->create();
	$johnUser->setRole('Renter');
	
	$johnRenter = new Renter();
	$johnRenter->setProperty("account_uid", $johnUser->getProperty("uid"));
	$johnRenter->setProperty("name", "John Horticulture");
	$johnRenter->setProperty("is_adult", "1");
	$johnRenter->setProperty("birth_time", strtotime("nov 30, 1980"));
	$johnRenter->create();
	
	$johnRentalAccount = new RentalAccount();
	$johnRentalAccount->setProperty("uid", $johnUser->getProperty("uid"));
	$johnRentalAccount->setProperty("credit_card", "1000000000");
	$johnRentalAccount->setProperty("phone", "4039885305");
	$johnRentalAccount->setProperty("primary_renter_id", $johnRenter->getProperty("id"));
	$johnRentalAccount->create();
	
	$littleSusan = new Renter();
	$littleSusan->setProperty("account_uid", $johnUser->getProperty("uid"));
	$littleSusan->setProperty("name", "Susan Horticulture");
	$littleSusan->setProperty("is_adult", "0");
	$littleSusan->setProperty("birth_time", strtotime("nov 30, 2016"));
	$littleSusan->create();
	
	$littleTimothy = new Renter();
	$littleTimothy->setProperty("account_uid", $johnUser->getProperty("uid"));
	$littleTimothy->setProperty("name", "Timothy Horticulture");
	$littleTimothy->setProperty("is_adult", "0");
	$littleTimothy->setProperty("birth_time", strtotime("nov 30, 2016"));
	$littleTimothy->create();
	
	$johnCottageRental = new Rental();
	$johnCottageRental->setProperty("start_time", strtotime("july 10 2017"));
	$johnCottageRental->setProperty("renters_uid", $johnUser->getProperty("uid"));
	$johnCottageRental->setProperty("duration", (strtotime("july 12 2017") - strtotime("july 10 2017")) / 3600);
	$johnCottageRental->setProperty("actual_arrival_time", null);
	$johnCottageRental->setProperty("estimated_arrival_time", strtotime("july 12 2017"));
	$johnCottageRental->setProperty("returning", "0");
	$johnCottageRental->setProperty("rental_type", "Cottage");
	$johnCottageRental->setProperty("has_been_confirmed", "1");
	$johnCottageRental->create();
	$johnCottageRental->linkItem($Cottages["Cottage0"]->getProperty('id'));
	$johnCottageRental->linkRenter($johnRenter->getProperty('id'));
	$johnCottageRental->linkRenter($littleSusan->getProperty('id'));
	$johnCottageRental->linkRenter($littleTimothy->getProperty('id'));
	
	
	
	$jimmyUser = new User();
	$jimmyUser->setProperty("name", "xXTheRustlerXx");
	$jimmyUser->setProperty("mail", "giraffe@effarig.savhanna");
	$jimmyUser->setProperty("pass", "password");
	$jimmyUser->create();
	$jimmyUser->setRole('Renter');
	
	$jimmyRenter = new Renter();
	$jimmyRenter->setProperty("account_uid", $jimmyUser->getProperty("uid"));
	$jimmyRenter->setProperty("name", "Jimmy Rustle");
	$jimmyRenter->setProperty("is_adult", "1");
	$jimmyRenter->setProperty("birth_time", strtotime("nov 29, 1980"));
	$jimmyRenter->create();
	
	$jimmyRentalAccount = new RentalAccount();
	$jimmyRentalAccount->setProperty("uid", $jimmyUser->getProperty("uid"));
	$jimmyRentalAccount->setProperty("credit_card", "1000000001");
	$jimmyRentalAccount->setProperty("phone", "4039985305");
	$jimmyRentalAccount->setProperty("primary_renter_id", $jimmyRenter->getProperty("id"));
	$jimmyRentalAccount->create();
	
	$littleBilly = new Renter();
	$littleBilly->setProperty("account_uid", $jimmyUser->getProperty("uid"));
	$littleBilly->setProperty("name", "Billy Rustle");
	$littleBilly->setProperty("is_adult", "0");
	$littleBilly->setProperty("birth_time", strtotime("nov 30, 2016"));
	$littleBilly->create();
	
	$littleJilly = new Renter();
	$littleJilly->setProperty("account_uid", $jimmyUser->getProperty("uid"));
	$littleJilly->setProperty("name", "Jilly Rustle");
	$littleJilly->setProperty("is_adult", "0");
	$littleJilly->setProperty("birth_time", strtotime("nov 30, 2016"));
	$littleJilly->create();
	
	$jimmyBoatRental = new Rental();
	$jimmyBoatRental->setProperty("start_time", strtotime("july 15 2017"));
	$jimmyBoatRental->setProperty("renters_uid", $jimmyUser->getProperty("uid"));
	$jimmyBoatRental->setProperty("duration", (strtotime("july 17 2017") - strtotime("july 15 2017")) / 3600);
	$jimmyBoatRental->setProperty("actual_arrival_time", null);
	$jimmyBoatRental->setProperty("estimated_arrival_time", strtotime("july 15 2017"));
	$jimmyBoatRental->setProperty("returning", "0");
	$jimmyBoatRental->setProperty("rental_type", "BoatItem");
	$jimmyBoatRental->setProperty("has_been_confirmed", "1");
	$jimmyBoatRental->create();
	$jimmyBoatRental->linkItem($Boats["Boat0"]->getProperty('id'));
	$jimmyBoatRental->linkRenter($jimmyRenter->getProperty('id'));
	$jimmyBoatRental->linkRenter($littleBilly->getProperty('id'));
	
	
	$waldoUser = new User();
	$waldoUser->setProperty("name", "xXTheWalDoXx");
	$waldoUser->setProperty("mail", "findmenow@hideandseek.whereami");
	$waldoUser->setProperty("pass", "password");
	$waldoUser->create();
	$waldoUser->setRole('Renter');
	
	$waldoRenter = new Renter();
	$waldoRenter->setProperty("account_uid", $waldoUser->getProperty("uid"));
	$waldoRenter->setProperty("name", "FIND WALDO");
	$waldoRenter->setProperty("is_adult", "1");
	$waldoRenter->setProperty("birth_time", strtotime("nov 29, 1980"));
	$waldoRenter->create();
	
	$waldoRentalAccount = new RentalAccount();
	$waldoRentalAccount->setProperty("uid", $waldoUser->getProperty("uid"));
	$waldoRentalAccount->setProperty("credit_card", "1000000002");
	$waldoRentalAccount->setProperty("phone", "4039895305");
	$waldoRentalAccount->setProperty("primary_renter_id", $waldoRenter->getProperty("id"));
	$waldoRentalAccount->create();
	
	$littleWaldo = new Renter();
	$littleWaldo->setProperty("account_uid", $waldoUser->getProperty("uid"));
	$littleWaldo->setProperty("name", "Hard Mode Waldo");
	$littleWaldo->setProperty("is_adult", "0");
	$littleWaldo->setProperty("birth_time", strtotime("nov 30, 2016"));
	$littleWaldo->create();
	
	$waldoCottageRental = new Rental();
	$waldoCottageRental->setProperty("start_time", strtotime("july 18 2017"));
	$waldoCottageRental->setProperty("renters_uid", $waldoUser->getProperty("uid"));
	$waldoCottageRental->setProperty("duration", (strtotime("july 20 2017") - strtotime("july 18 2017")) / 3600);
	$waldoCottageRental->setProperty("actual_arrival_time", null);
	$waldoCottageRental->setProperty("estimated_arrival_time", strtotime("july 18 2017"));
	$waldoCottageRental->setProperty("returning", "0");
	$waldoCottageRental->setProperty("rental_type", "Cottage");
	$waldoCottageRental->setProperty("has_been_confirmed", "1");
	$waldoCottageRental->create();
	$waldoCottageRental->linkItem($Cottages["Cottage0"]->getProperty('id'));
	$waldoCottageRental->linkRenter($waldoRenter->getProperty('id'));
	$waldoCottageRental->linkRenter($littleWaldo->getProperty('id'));
	
	$waldoBoatRental = new Rental();
	$waldoBoatRental->setProperty("start_time", strtotime("july 18 2017"));
	$waldoBoatRental->setProperty("renters_uid", $waldoUser->getProperty("uid"));
	$waldoBoatRental->setProperty("duration", (strtotime("july 20 2017") - strtotime("july 18 2017")) / 3600);
	$waldoBoatRental->setProperty("actual_arrival_time", null);
	$waldoBoatRental->setProperty("estimated_arrival_time", strtotime("july 18 2017"));
	$waldoBoatRental->setProperty("returning", "0");
	$waldoBoatRental->setProperty("rental_type", "BoatItem");
	$waldoBoatRental->setProperty("has_been_confirmed", "0");
	$waldoBoatRental->create();
	$waldoBoatRental->linkItem($Boats["Boat0"]->getProperty('id'));
	$waldoBoatRental->linkRenter($waldoRenter->getProperty('id'));
	
}
